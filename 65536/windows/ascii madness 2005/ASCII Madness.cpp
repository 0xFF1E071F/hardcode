#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <conio.h>
#include <math.h>

const float PI = 3.1415926535897932384626433832795;

HANDLE wHnd, rHnd;							// Write/read handles to console window
COORD coord = {80, 50}, coord2 = {0, 0};	// Coordinates used for "blit" operations
CHAR_INFO chars[80*50];						// Character buffer
SMALL_RECT write = {0, 0, 79, 49};			// Region to write to

bool allKeys[256] = {0,};					// Buffer to hold state of all the keys

float heightMap[256][256];

CHAR_INFO palette[8][8];

byte compFont[] = {145, 255, 9, 145, 0, 3, 255, 255, 145, 0, 3, 255, 145, 0, 3, 255, 145, 0, 5, 255, 145, 0, 3, 145, 255, 4, 145, 0, 5, 255, 255, 145, 0, 6, 145, 255, 3, 145, 0, 3, 145, 255, 3, 145, 0, 4, 145, 255, 4, 145, 0, 4, 255, 145, 0, 7, 255, 255, 145, 0, 3, 145, 255, 26, 145, 0, 3, 255, 145, 0, 12, 255, 255, 145, 0, 17, 255, 145, 0, 13, 145, 255, 4, 145, 0, 21, 255, 255, 145, 0, 3, 145, 255, 4, 145, 0, 3, 145, 255, 6, 145, 0, 13, 145, 255, 4, 145, 0, 35, 145, 255, 9, 0, 63, 0, 255, 255, 0, 63, 0, 255, 0, 63, 145, 0, 3, 63, 0, 63, 145, 0, 3, 63, 0, 145, 255, 4, 0, 63, 0, 63, 0, 255, 255, 0, 63, 63, 0, 63, 0, 145, 255, 3, 0, 63, 0, 145, 255, 3, 0, 63, 63, 0, 145, 255, 4, 0, 63, 63, 0, 255, 0, 63, 0, 63, 0, 63, 0, 255, 255, 0, 63, 0, 145, 255, 26, 0, 63, 0, 255, 0, 145, 63, 5, 0, 0, 145, 63, 3, 0, 255, 255, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 63, 0, 255, 0, 63, 0, 0, 145, 63, 5, 0, 0, 63, 0, 145, 255, 4, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 255, 255, 0, 63, 0, 145, 255, 4, 0, 63, 0, 145, 255, 5, 0, 63, 63, 0, 0, 145, 63, 5, 0, 0, 63, 63, 0, 145, 255, 3, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 145, 255, 9, 0, 63, 0, 255, 255, 145, 0, 3, 255, 145, 0, 4, 145, 63, 5, 0, 0, 63, 145, 0, 3, 255, 255, 145, 0, 3, 63, 0, 255, 255, 0, 63, 0, 0, 63, 0, 0, 255, 255, 145, 0, 3, 145, 255, 3, 0, 63, 0, 0, 145, 255, 4, 0, 0, 63, 0, 255, 145, 0, 3, 63, 145, 0, 6, 63, 145, 0, 3, 145, 255, 7, 145, 0, 7, 145, 255, 10, 0, 63, 0, 255, 0, 63, 145, 0, 3, 63, 145, 0, 4, 63, 0, 255, 255, 145, 0, 5, 63, 145, 0, 6, 63, 0, 0, 63, 145, 0, 3, 63, 0, 0, 63, 145, 0, 6, 63, 145, 0, 10, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 63, 0, 145, 63, 3, 0, 255, 255, 145, 0, 3, 145, 255, 4, 145, 0, 3, 255, 255, 145, 0, 3, 63, 63, 145, 0, 11, 63, 63, 145, 0, 8, 63, 0, 0, 63, 145, 0, 3, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 145, 63, 3, 0, 63, 0, 0, 63, 145, 0, 5, 145, 255, 9, 0, 63, 0, 145, 255, 9, 0, 0, 63, 0, 63, 145, 0, 3, 145, 63, 3, 0, 145, 255, 4, 0, 63, 0, 255, 255, 0, 145, 63, 5, 0, 145, 255, 8, 0, 63, 0, 145, 255, 6, 0, 63, 0, 255, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 255, 255, 145, 0, 3, 255, 255, 0, 145, 63, 5, 0, 145, 255, 9, 0, 63, 63, 0, 255, 0, 63, 0, 255, 0, 63, 0, 255, 255, 0, 63, 0, 255, 255, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 145, 255, 4, 0, 63, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 145, 255, 14, 0, 145, 63, 3, 0, 145, 255, 11, 0, 145, 63, 3, 0, 255, 255, 0, 145, 63, 3, 0, 0, 63, 0, 145, 63, 3, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 63, 0, 145, 255, 13, 145, 0, 3, 145, 255, 9, 0, 145, 63, 5, 0, 0, 63, 145, 0, 5, 255, 255, 0, 63, 145, 0, 4, 63, 0, 0, 63, 0, 0, 145, 255, 8, 0, 63, 0, 0, 145, 255, 4, 0, 0, 63, 0, 255, 145, 0, 3, 63, 145, 0, 6, 63, 145, 0, 3, 255, 0, 0, 63, 0, 255, 255, 145, 0, 7, 255, 255, 145, 0, 3, 145, 255, 4, 0, 63, 0, 255, 255, 0, 63, 145, 0, 3, 63, 145, 0, 4, 63, 145, 0, 4, 63, 145, 0, 10, 63, 145, 0, 6, 63, 145, 0, 6, 63, 0, 0, 145, 63, 3, 0, 63, 0, 145, 255, 4, 0, 63, 0, 0, 63, 63, 0, 63, 63, 145, 0, 6, 63, 0, 255, 255, 145, 0, 3, 145, 255, 3, 145, 0, 4, 255, 255, 145, 0, 3, 63, 63, 145, 0, 11, 63, 63, 145, 0, 3, 255, 255, 145, 0, 6, 63, 0, 63, 0, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 145, 63, 3, 0, 63, 0, 0, 63, 145, 0, 5, 145, 255, 9, 0, 63, 0, 145, 255, 9, 0, 0, 63, 0, 63, 145, 0, 3, 145, 63, 5, 0, 255, 255, 0, 63, 0, 63, 0, 0, 63, 63, 0, 63, 63, 0, 145, 255, 8, 0, 63, 63, 0, 145, 255, 4, 0, 63, 63, 0, 255, 0, 63, 0, 63, 0, 63, 0, 255, 255, 0, 63, 0, 145, 255, 3, 0, 63, 63, 0, 145, 255, 11, 0, 63, 0, 145, 255, 4, 0, 63, 0, 255, 255, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 145, 255, 4, 0, 63, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 145, 255, 4, 0, 63, 0, 0, 145, 63, 5, 0, 145, 255, 4, 0, 63, 0, 255, 255, 0, 63, 0, 145, 255, 3, 0, 63, 63, 0, 145, 255, 5, 0, 63, 63, 0, 0, 145, 63, 5, 0, 0, 63, 63, 0, 145, 255, 5, 0, 63, 0, 255, 255, 0, 63, 0, 145, 63, 3, 0, 0, 63, 63, 0, 63, 63, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 145, 255, 9, 145, 0, 3, 145, 255, 10, 145, 0, 5, 255, 145, 0, 7, 255, 255, 145, 0, 12, 145, 255, 8, 145, 0, 4, 145, 255, 4, 145, 0, 4, 255, 145, 0, 7, 255, 255, 145, 0, 3, 145, 255, 3, 145, 0, 4, 145, 255, 11, 145, 0, 3, 145, 255, 4, 145, 0, 3, 255, 255, 145, 0, 28, 145, 255, 4, 145, 0, 17, 145, 255, 4, 145, 0, 10, 145, 255, 4, 145, 0, 3, 255, 255, 145, 0, 3, 145, 255, 3, 145, 0, 4, 145, 255, 6, 145, 0, 13, 145, 255, 6, 145, 0, 3, 255, 255, 145, 0, 34, 255, 145, 0, 24, 255, 145, 0, 27, 145, 255, 4, 145, 0, 59, 255, 145, 0, 27, 255, 145, 0, 10, 255, 145, 0, 5, 255, 255, 145, 0, 3, 145, 255, 4, 145, 0, 5, 255, 255, 145, 0, 5, 145, 255, 9, 145, 0, 4, 255, 255, 145, 0, 5, 255, 255, 145, 0, 3, 145, 255, 4, 145, 0, 7, 145, 255, 4, 145, 0, 25, 145, 63, 4, 145, 0, 3, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 63, 0, 255, 0, 63, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 63, 0, 145, 63, 3, 0, 0, 63, 0, 145, 255, 4, 0, 145, 63, 5, 0, 0, 145, 63, 3, 0, 63, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 63, 0, 255, 0, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 63, 0, 63, 0, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 63, 0, 255, 0, 63, 0, 0, 145, 63, 5, 0, 255, 0, 145, 63, 3, 0, 255, 255, 0, 63, 0, 145, 255, 4, 0, 145, 63, 3, 0, 255, 255, 0, 145, 63, 3, 0, 145, 255, 9, 0, 63, 63, 0, 255, 255, 0, 145, 63, 3, 0, 255, 255, 0, 63, 0, 145, 255, 4, 0, 145, 63, 5, 0, 145, 255, 4, 0, 63, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 63, 145, 0, 3, 63, 0, 0, 63, 145, 0, 6, 63, 145, 0, 6, 63, 145, 0, 6, 63, 145, 0, 3, 63, 145, 0, 4, 63, 145, 0, 6, 63, 145, 0, 4, 63, 0, 63, 145, 0, 4, 63, 0, 145, 255, 4, 0, 63, 0, 63, 0, 63, 0, 0, 63, 0, 63, 0, 63, 0, 0, 63, 145, 0, 3, 63, 0, 0, 145, 63, 3, 0, 63, 0, 0, 145, 63, 3, 0, 63, 0, 0, 145, 63, 3, 0, 63, 0, 0, 63, 145, 0, 8, 63, 145, 0, 4, 63, 0, 255, 0, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 63, 0, 63, 0, 63, 0, 0, 145, 63, 5, 0, 0, 63, 145, 0, 3, 63, 145, 0, 6, 63, 0, 255, 0, 63, 145, 0, 3, 255, 255, 0, 63, 0, 145, 255, 4, 145, 0, 3, 63, 0, 255, 255, 0, 63, 0, 63, 0, 145, 255, 10, 145, 0, 3, 255, 255, 0, 63, 0, 63, 0, 255, 255, 0, 63, 145, 0, 6, 63, 145, 0, 10, 63, 0, 0, 145, 63, 3, 0, 63, 0, 0, 63, 145, 0, 6, 63, 0, 145, 63, 3, 0, 0, 63, 0, 255, 0, 63, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 63, 0, 145, 63, 3, 0, 0, 145, 63, 5, 0, 255, 255, 0, 63, 0, 145, 255, 4, 0, 63, 0, 255, 255, 0, 145, 63, 3, 0, 255, 255, 0, 63, 0, 145, 255, 4, 0, 63, 0, 63, 0, 63, 0, 0, 63, 0, 63, 0, 63, 0, 0, 63, 0, 255, 0, 63, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 255, 255, 0, 63, 0, 255, 255, 0, 63, 0, 255, 0, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 63, 0, 63, 0, 63, 145, 0, 3, 145, 63, 3, 145, 0, 3, 145, 63, 5, 0, 0, 145, 63, 5, 0, 255, 0, 63, 0, 145, 255, 4, 0, 63, 63, 0, 145, 255, 5, 0, 63, 0, 255, 255, 145, 0, 5, 145, 255, 15, 0, 145, 63, 3, 0, 255, 255, 0, 145, 63, 5, 0, 0, 63, 0, 145, 255, 4, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 63, 145, 0, 3, 63, 0, 0, 63, 145, 0, 6, 63, 145, 0, 6, 63, 145, 0, 3, 63, 0, 0, 63, 145, 0, 3, 63, 145, 0, 4, 63, 145, 0, 6, 63, 0, 255, 255, 0, 63, 0, 63, 145, 0, 4, 63, 145, 0, 6, 63, 0, 63, 0, 63, 0, 0, 63, 0, 63, 0, 63, 0, 0, 63, 145, 0, 3, 63, 0, 0, 63, 145, 0, 9, 63, 145, 0, 3, 63, 0, 63, 145, 0, 8, 63, 0, 255, 255, 0, 63, 0, 255, 255, 0, 63, 145, 0, 3, 63, 145, 0, 3, 63, 0, 63, 145, 0, 3, 63, 0, 63, 0, 63, 0, 0, 145, 63, 5, 145, 0, 4, 63, 145, 0, 4, 63, 145, 0, 5, 255, 0, 63, 145, 0, 3, 145, 255, 3, 0, 63, 0, 145, 255, 3, 145, 0, 3, 63, 0, 145, 255, 8, 145, 0, 7, 145, 255, 7, 0, 145, 63, 3, 145, 0, 4, 145, 63, 3, 0, 63, 0, 0, 63, 145, 0, 6, 63, 0, 145, 63, 3, 0, 0, 63, 145, 0, 6, 63, 145, 0, 10, 63, 0, 0, 145, 63, 4, 145, 0, 3, 145, 63, 5, 0, 0, 63, 0, 145, 255, 4, 0, 145, 63, 5, 0, 0, 63, 0, 255, 0, 63, 0, 0, 145, 63, 5, 0, 0, 145, 63, 3, 0, 255, 255, 0, 63, 0, 145, 63, 3, 0, 0, 145, 63, 5, 0, 0, 63, 0, 63, 0, 63, 0, 0, 63, 0, 145, 63, 3, 0, 0, 145, 63, 5, 0, 0, 63, 0, 145, 255, 7, 0, 63, 0, 255, 0, 63, 0, 145, 63, 3, 0, 0, 145, 63, 5, 0, 255, 255, 0, 63, 0, 255, 255, 0, 145, 63, 5, 0, 255, 0, 145, 63, 3, 0, 255, 0, 145, 63, 5, 0, 0, 63, 63, 0, 63, 63, 0, 255, 255, 0, 63, 0, 255, 255, 0, 145, 63, 5, 0, 255, 0, 145, 63, 3, 0, 145, 255, 3, 0, 63, 0, 145, 255, 3, 0, 145, 63, 3, 0, 145, 255, 8, 0, 145, 63, 5, 0, 145, 255, 7, 0, 63, 0, 145, 63, 3, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 63, 0, 145, 255, 4, 0, 145, 63, 5, 145, 0, 7, 255, 145, 0, 10, 145, 255, 4, 145, 0, 10, 255, 145, 0, 15, 255, 255, 145, 0, 38, 145, 255, 7, 145, 0, 3, 255, 145, 0, 14, 255, 255, 145, 0, 3, 255, 255, 145, 0, 7, 255, 145, 0, 5, 255, 145, 0, 14, 255, 255, 145, 0, 3, 255, 255, 145, 0, 7, 255, 145, 0, 5, 145, 255, 3, 145, 0, 3, 145, 255, 3, 145, 0, 5, 145, 255, 8, 145, 0, 7, 145, 255, 7, 145, 0, 38, 145, 255, 4, 145, 0, 10, 145, 255, 6, 145, 0, 3, 145, 255, 4, 145, 0, 3, 255, 255, 145, 0, 7, 255, 145, 0, 3, 145, 255, 3, 145, 0, 33, 255, 255, 145, 0, 14, 255, 145, 0, 3, 145, 255, 3, 145, 0, 3, 255, 145, 0, 27, 255, 145, 0, 10, 145, 255, 3, 145, 0, 4, 255, 255, 145, 0, 3, 255, 255, 145, 0, 4, 145, 255, 10, 145, 63, 91, 0, 63, 0, 145, 255, 6, 0, 63, 0, 145, 255, 4, 0, 63, 0, 255, 255, 0, 63, 0, 145, 63, 3, 0, 255, 0, 63, 0, 145, 255, 3, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 0, 145, 63, 3, 0, 255, 255, 0, 145, 63, 5, 0, 0, 145, 63, 5, 0, 255, 0, 63, 0, 145, 255, 3, 0, 63, 0, 255, 0, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 63, 0, 63, 0, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 63, 0, 255, 0, 63, 0, 0, 145, 63, 5, 0, 255, 255, 0, 145, 63, 3, 0, 255, 255, 0, 63, 0, 255, 255, 0, 145, 63, 3, 0, 145, 255, 6, 145, 0, 3, 145, 63, 91, 0, 63, 145, 0, 5, 255, 255, 145, 0, 3, 145, 255, 4, 145, 0, 3, 255, 255, 0, 63, 0, 63, 145, 0, 3, 255, 0, 63, 0, 145, 255, 3, 0, 63, 0, 63, 0, 63, 0, 0, 63, 145, 0, 3, 63, 0, 0, 63, 145, 0, 3, 63, 0, 0, 145, 63, 3, 0, 63, 0, 0, 63, 0, 63, 0, 255, 255, 0, 63, 145, 0, 6, 63, 145, 0, 5, 255, 0, 63, 145, 0, 3, 255, 0, 63, 0, 255, 0, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 63, 0, 63, 0, 63, 0, 0, 145, 63, 5, 0, 0, 63, 145, 0, 3, 63, 145, 0, 6, 63, 0, 255, 255, 0, 63, 145, 0, 3, 255, 255, 0, 63, 0, 255, 255, 145, 0, 3, 63, 0, 255, 255, 145, 0, 5, 63, 0, 145, 63, 91, 0, 145, 63, 5, 0, 255, 255, 0, 63, 0, 145, 255, 4, 0, 63, 0, 255, 255, 0, 145, 63, 3, 0, 145, 255, 3, 0, 63, 0, 145, 255, 3, 0, 63, 0, 63, 0, 63, 0, 0, 63, 0, 255, 0, 63, 0, 0, 63, 0, 255, 0, 63, 0, 0, 145, 63, 5, 0, 0, 145, 63, 3, 0, 255, 255, 0, 63, 0, 145, 255, 4, 0, 145, 63, 5, 0, 255, 0, 145, 63, 3, 0, 255, 0, 63, 0, 255, 0, 63, 0, 0, 63, 63, 0, 63, 63, 0, 0, 63, 0, 63, 0, 63, 145, 0, 3, 145, 63, 3, 145, 0, 3, 145, 63, 5, 0, 0, 145, 63, 5, 0, 255, 0, 0, 63, 0, 145, 255, 4, 0, 63, 0, 145, 255, 4, 0, 63, 0, 0, 255, 0, 145, 63, 5, 0, 145, 63, 91, 0, 63, 145, 0, 3, 63, 0, 255, 255, 0, 63, 0, 255, 255, 145, 0, 3, 63, 0, 255, 255, 0, 63, 0, 63, 145, 0, 3, 255, 0, 63, 0, 0, 255, 255, 0, 63, 0, 63, 0, 63, 0, 0, 63, 0, 255, 0, 63, 0, 0, 63, 145, 0, 3, 63, 0, 0, 63, 145, 0, 8, 63, 145, 0, 4, 63, 0, 145, 255, 4, 145, 0, 5, 63, 0, 255, 0, 63, 145, 0, 3, 255, 0, 63, 145, 0, 3, 63, 145, 0, 3, 63, 0, 63, 145, 0, 3, 63, 0, 63, 0, 63, 0, 0, 145, 63, 5, 145, 0, 6, 63, 0, 0, 63, 145, 0, 5, 255, 255, 0, 63, 145, 0, 3, 255, 255, 0, 63, 0, 255, 255, 145, 0, 3, 63, 0, 255, 255, 0, 63, 145, 0, 5, 145, 63, 91, 0, 63, 0, 255, 0, 63, 0, 255, 255, 0, 63, 0, 255, 255, 0, 145, 63, 3, 0, 255, 255, 0, 63, 0, 145, 63, 3, 0, 255, 0, 63, 63, 0, 255, 255, 0, 63, 0, 63, 0, 63, 0, 0, 63, 0, 255, 0, 63, 0, 0, 145, 63, 5, 0, 0, 63, 0, 145, 255, 6, 0, 145, 63, 3, 0, 0, 63, 0, 145, 255, 4, 0, 145, 63, 5, 0, 255, 0, 145, 63, 3, 0, 255, 0, 145, 63, 5, 0, 255, 0, 145, 63, 3, 0, 255, 0, 145, 63, 5, 0, 0, 63, 63, 0, 63, 63, 0, 145, 255, 4, 0, 63, 0, 0, 145, 63, 5, 0, 255, 255, 0, 145, 63, 3, 0, 255, 255, 0, 63, 0, 255, 255, 0, 145, 63, 3, 0, 255, 255, 145, 0, 3, 145, 255, 4, 145, 63, 91, 145, 0, 3, 255, 145, 0, 3, 255, 255, 145, 0, 3, 255, 255, 145, 0, 5, 255, 255, 145, 0, 7, 255, 145, 0, 4, 255, 255, 145, 0, 10, 255, 145, 0, 13, 145, 255, 6, 145, 0, 8, 145, 255, 4, 145, 0, 7, 255, 145, 0, 5, 255, 145, 0, 7, 255, 145, 0, 5, 255, 145, 0, 14, 145, 255, 4, 145, 0, 10, 145, 255, 3, 145, 0, 4, 255, 255, 145, 0, 3, 255, 255, 145, 0, 4, 145, 255, 10, 145, 63, 91};
byte smallFont[252*21];

// Sydney Opera House:
byte compOpera[] = {145, 59, 197, 0, 145, 59, 27, 145, 62, 7, 145, 59, 45, 8, 0, 0, 145, 59, 24, 145, 62, 9, 145, 59, 43, 16, 40, 16, 63, 0, 145, 59, 23, 145, 62, 9, 145, 59, 43, 0, 15, 40, 24, 63, 0, 145, 59, 22, 145, 62, 9, 145, 59, 33, 0, 145, 59, 8, 0, 0, 8, 15, 40, 40, 63, 0, 145, 59, 21, 145, 62, 9, 145, 59, 33, 0, 0, 145, 59, 3, 145, 0, 3, 59, 145, 0, 3, 15, 40, 0, 55, 15, 0, 145, 59, 21, 145, 62, 7, 145, 59, 34, 0, 16, 0, 59, 145, 0, 3, 31, 0, 0, 8, 0, 0, 40, 0, 0, 55, 15, 0, 145, 59, 61, 0, 0, 24, 0, 8, 145, 0, 3, 31, 63, 63, 16, 0, 24, 24, 0, 55, 63, 15, 0, 145, 59, 57, 145, 0, 4, 47, 47, 31, 24, 145, 0, 4, 31, 145, 63, 4, 24, 8, 0, 39, 63, 0, 145, 59, 56, 0, 40, 145, 0, 4, 63, 47, 31, 31, 145, 24, 3, 0, 31, 145, 63, 4, 24, 0, 8, 39, 63, 0, 145, 59, 55, 0, 16, 145, 0, 5, 63, 63, 47, 31, 31, 24, 24, 0, 31, 145, 63, 3, 24, 24, 0, 39, 63, 63, 0, 145, 59, 48, 145, 0, 4, 59, 59, 8, 145, 0, 4, 8, 0, 0, 145, 63, 3, 47, 31, 31, 24, 0, 31, 145, 63, 3, 24, 0, 16, 39, 63, 0, 59, 59, 145, 0, 5, 145, 59, 40, 0, 32, 145, 31, 3, 145, 0, 6, 145, 8, 3, 0, 0, 145, 63, 3, 47, 31, 31, 24, 0, 145, 63, 4, 24, 0, 39, 63, 63, 0, 0, 145, 15, 5, 0, 145, 59, 39, 0, 0, 55, 63, 63, 145, 31, 3, 0, 0, 8, 32, 0, 8, 8, 0, 0, 145, 63, 3, 47, 145, 31, 3, 0, 145, 63, 3, 24, 8, 32, 39, 63, 15, 0, 0, 145, 39, 3, 15, 0, 145, 59, 40, 0, 0, 55, 145, 63, 3, 31, 8, 0, 145, 32, 3, 145, 0, 5, 145, 63, 3, 47, 31, 31, 24, 31, 145, 63, 3, 24, 0, 39, 63, 63, 15, 0, 145, 63, 3, 39, 15, 0, 145, 59, 40, 0, 0, 55, 63, 63, 31, 16, 145, 32, 6, 8, 0, 0, 8, 24, 145, 47, 3, 31, 24, 48, 145, 63, 3, 24, 8, 39, 39, 63, 63, 15, 0, 63, 63, 39, 15, 0, 145, 59, 21, 18, 59, 59, 34, 59, 59, 34, 145, 59, 13, 0, 55, 55, 63, 31, 145, 32, 8, 8, 8, 0, 24, 24, 48, 145, 24, 3, 40, 31, 63, 63, 24, 8, 40, 39, 145, 63, 3, 15, 0, 63, 39, 15, 0, 59, 59, 145, 0, 3, 145, 59, 4, 145, 0, 4, 145, 59, 6, 18, 59, 18, 18, 34, 18, 50, 42, 18, 50, 59, 34, 145, 59, 9, 24, 8, 0, 0, 8, 145, 0, 3, 8, 145, 0, 9, 8, 16, 16, 8, 0, 24, 31, 63, 63, 145, 24, 3, 39, 39, 63, 63, 15, 15, 0, 39, 15, 0, 7, 145, 0, 3, 63, 145, 0, 4, 145, 63, 4, 0, 34, 18, 18, 59, 42, 34, 18, 42, 18, 18, 42, 50, 42, 50, 18, 18, 50, 18, 18, 59, 34, 59, 18, 145, 0, 3, 8, 0, 8, 24, 24, 145, 16, 4, 24, 145, 16, 3, 145, 24, 5, 145, 32, 4, 145, 24, 3, 32, 145, 24, 4, 145, 39, 3, 63, 15, 15, 0, 145, 39, 3, 7, 7, 145, 0, 3, 48, 0, 0, 145, 63, 5, 0, 34, 42, 42, 18, 34, 42, 18, 34, 145, 42, 3, 50, 50, 42, 34, 50, 34, 50, 34, 34, 18, 34, 18, 7, 8, 16, 16, 24, 32, 32, 145, 24, 8, 16, 24, 24, 145, 32, 8, 24, 24, 16, 16, 8, 145, 0, 18, 40, 48, 0, 145, 63, 4, 10, 18, 42, 34, 18, 42, 42, 18, 34, 42, 18, 50, 42, 18, 50, 34, 18, 42, 18, 50, 50, 0, 8, 16, 145, 32, 3, 16, 24, 32, 32, 145, 24, 17, 18, 145, 24, 7, 16, 16, 24, 145, 32, 3, 145, 24, 3, 32, 24, 24, 16, 145, 8, 3, 0, 0, 24, 16, 0, 0, 63, 10, 10, 18, 34, 34, 42, 18, 34, 42, 34, 42, 50, 18, 42, 50, 18, 42, 50, 18, 50, 18, 50, 16, 8, 18, 8, 8, 18, 145, 8, 8, 18, 145, 8, 3, 34, 8, 8, 18, 8, 10, 8, 10, 8, 18, 10, 8, 10, 8, 145, 10, 3, 18, 24, 34, 24, 34, 24, 24, 34, 24, 24, 32, 32, 145, 10, 5, 24, 145, 10, 3, 8, 145, 10, 3, 145, 42, 3, 34, 42, 42, 34, 42, 42, 18, 50, 18, 42, 50, 18, 34, 18, 34, 18, 50, 34, 18, 34, 18, 34, 18, 18, 34, 18, 10, 34, 10, 18, 34, 10, 34, 10, 34, 10, 34, 10, 10, 34, 145, 18, 3, 34, 145, 10, 4, 34, 18, 145, 10, 3, 18, 18, 145, 10, 3, 18, 32, 34, 34, 145, 10, 4, 34, 34, 10, 18, 34, 10, 18, 10, 10, 18, 18, 42, 34, 18, 34, 34, 145, 42, 3, 18};
byte bmpOpera[80*25];

// Keyboard:
byte compGlasses[] = {27, 9, 0, 0, 11, 27, 33, 37, 37, 29, 145, 57, 3, 35, 51, 51, 59, 35, 33, 145, 9, 9, 13, 37, 53, 41, 33, 17, 9, 9, 13, 37, 53, 37, 0, 13, 53, 53, 61, 61, 37, 53, 13, 13, 33, 51, 41, 21, 12, 27, 11, 12, 12, 14, 145, 0, 4, 12, 43, 51, 145, 0, 3, 12, 12, 0, 12, 14, 14, 35, 38, 30, 17, 35, 11, 9, 9, 19, 19, 13, 29, 37, 37, 145, 57, 3, 35, 51, 51, 59, 59, 27, 17, 145, 9, 8, 29, 53, 37, 33, 17, 145, 9, 3, 13, 13, 29, 53, 37, 12, 37, 53, 53, 61, 61, 53, 53, 21, 27, 63, 37, 29, 12, 36, 34, 14, 12, 20, 20, 12, 0, 12, 12, 19, 59, 11, 0, 14, 14, 12, 14, 12, 14, 30, 51, 62, 38, 30, 35, 11, 9, 11, 19, 11, 0, 0, 13, 29, 145, 57, 3, 35, 35, 51, 51, 43, 27, 17, 145, 9, 7, 13, 53, 37, 13, 13, 145, 9, 4, 13, 9, 0, 21, 53, 21, 13, 29, 61, 37, 37, 61, 37, 53, 45, 59, 37, 29, 20, 20, 42, 12, 12, 14, 145, 12, 6, 59, 51, 145, 0, 3, 10, 0, 12, 36, 51, 35, 145, 38, 3, 35, 11, 11, 19, 11, 145, 0, 4, 9, 33, 145, 57, 3, 145, 35, 3, 11, 11, 33, 145, 9, 7, 37, 53, 13, 13, 145, 9, 4, 13, 12, 9, 9, 0, 21, 53, 13, 13, 45, 145, 37, 3, 45, 29, 53, 51, 41, 13, 13, 20, 42, 14, 12, 14, 0, 145, 12, 5, 35, 59, 36, 145, 20, 3, 36, 36, 44, 145, 38, 5, 35, 17, 11, 19, 11, 145, 0, 3, 9, 0, 0, 9, 33, 41, 27, 27, 11, 0, 9, 11, 145, 9, 6, 13, 53, 37, 13, 13, 145, 9, 4, 12, 12, 9, 0, 11, 0, 37, 37, 5, 37, 29, 29, 145, 13, 3, 29, 39, 51, 13, 13, 36, 58, 20, 145, 12, 6, 13, 13, 35, 59, 57, 145, 20, 4, 12, 30, 38, 60, 38, 38, 54, 35, 13, 11, 11, 145, 0, 4, 13, 9, 0, 0, 9, 11, 11, 9, 0, 9, 0, 0, 145, 9, 6, 37, 53, 21, 13, 145, 9, 5, 12, 13, 145, 9, 3, 0, 13, 45, 13, 13, 37, 13, 13, 145, 12, 3, 53, 51, 29, 13, 23, 58, 13, 145, 12, 6, 21, 29, 43, 59, 59, 11, 14, 14, 12, 9, 14, 38, 44, 30, 38, 54, 11, 13, 13, 11, 0, 0, 9, 9, 13, 145, 0, 3, 10, 10, 9, 12, 12, 11, 145, 9, 7, 13, 53, 45, 13, 13, 145, 9, 5, 145, 12, 6, 13, 45, 13, 21, 145, 13, 3, 20, 20, 12, 13, 51, 53, 29, 58, 58, 13, 20, 145, 12, 5, 20, 20, 145, 59, 3, 19, 145, 12, 3, 13, 14, 54, 30, 44, 30, 54, 9, 13, 29, 13, 145, 9, 4, 145, 0, 4, 10, 11, 11, 145, 12, 3, 11, 19, 19, 11, 9, 13, 9, 33, 53, 21, 13, 13, 145, 9, 5, 145, 12, 6, 13, 53, 13, 12, 0, 145, 12, 5, 20, 53, 51, 37, 61, 35, 13, 13, 20, 145, 12, 5, 35, 145, 59, 3, 35, 145, 12, 3, 13, 12, 38, 38, 60, 35, 54, 9, 13, 21, 145, 13, 3, 145, 0, 6, 11, 10, 10, 12, 13, 20, 11, 19, 35, 35, 19, 19, 9, 37, 53, 145, 13, 3, 9, 9, 145, 0, 3, 145, 12, 5, 0, 13, 53, 12, 12, 0, 0, 10, 10, 14, 12, 20, 37, 53, 59, 59, 45, 13, 13, 20, 20, 145, 12, 3, 51, 59, 43, 59, 59, 35, 145, 12, 4, 36, 44, 44, 38, 35, 43, 9, 17, 145, 13, 3, 20, 12, 145, 0, 5, 10, 10, 0, 24, 48, 40, 0, 0, 19, 43, 51, 35, 19, 53, 45, 13, 13, 0, 9, 9, 14, 10, 0, 0, 12, 12, 0, 9, 0, 21, 45, 12, 12, 10, 145, 12, 4, 0, 29, 53, 53, 39, 59, 37, 29, 13, 20, 13, 13, 35, 59, 59, 19, 0, 22, 19, 145, 12, 3, 20, 36, 20, 12, 14, 14, 12, 18, 13, 13, 9, 9, 0, 12, 20, 20, 12, 145, 0, 3, 11, 11, 0, 24, 40, 40, 0, 0, 9, 33, 35, 51, 59, 53, 45, 13, 9, 0, 9, 13, 145, 0, 4, 12, 12, 13, 9, 0, 37, 29, 145, 12, 7, 13, 145, 53, 3, 39, 145, 51, 3, 35, 145, 59, 4, 35, 145, 12, 4, 0, 145, 12, 3, 36, 20, 0, 0, 14, 14, 12, 0, 53, 29, 13, 9, 0, 0, 12, 20, 20, 12, 0, 11, 11, 0, 0, 8, 40, 8, 0, 0, 9, 11, 11, 19, 35, 59, 29, 13, 9, 11, 145, 9, 3, 145, 0, 4, 12, 12, 0, 13, 53, 13, 145, 12, 6, 37, 53, 37, 29, 37, 61, 37, 29, 37, 145, 61, 3, 37, 145, 12, 9, 36, 12, 0, 12, 0, 12, 14, 14, 0, 53, 53, 37, 13, 12, 14, 12, 0, 145, 12, 3, 11, 11, 0, 12, 12, 145, 0, 4, 145, 9, 5, 27, 51, 19, 145, 9, 4, 12, 12, 145, 0, 4, 12, 12, 37, 37, 12, 13, 11, 12, 12, 13, 145, 37, 3, 12, 12, 61, 61, 37, 29, 13, 13, 37, 29, 37, 37, 13, 145, 12, 6, 20, 20, 145, 0, 4, 12, 12, 14, 0, 13, 37, 53, 53, 37, 0, 0, 12, 12, 13, 9, 19, 11, 0, 0, 12, 12, 0, 0, 145, 9, 3, 0, 9, 9, 0, 27, 51, 35, 11, 9, 11, 11, 145, 9, 5, 0, 21, 0, 145, 13, 3, 29, 29, 37, 37, 29, 13, 145, 12, 3, 29, 61, 37, 13, 10, 145, 12, 3, 13, 29, 37, 29, 13, 145, 12, 4, 20, 12, 12, 145, 0, 4, 12, 12, 0, 0, 12, 13, 53, 53, 37, 12, 12, 14, 12, 11, 27, 11, 145, 0, 3, 12, 12, 145, 0, 5, 9, 9, 0, 11, 43, 51, 51, 19, 10, 0, 9, 9, 11, 0, 0, 13, 53, 21, 13, 13, 37, 29, 37, 13, 145, 12, 6, 29, 37, 13, 145, 0, 3, 145, 12, 4, 13, 37, 37, 13, 145, 12, 3, 20, 0, 12, 12, 145, 0, 3, 145, 12, 3, 10, 9, 12, 13, 37, 53, 37, 37, 13, 13, 11, 27, 11, 145, 0, 3, 12, 12, 13, 145, 0, 4, 13, 9, 0, 11, 43, 145, 51, 3, 35, 19, 11, 11, 13, 13, 37, 37, 21, 12, 13, 9, 13, 12, 0, 145, 12, 6, 13, 37, 13, 0, 12, 145, 0, 3, 145, 12, 5, 29, 37, 29, 145, 12, 3, 0, 0, 145, 12, 7, 0, 0, 9, 12, 12, 29, 53, 37, 61, 37, 13, 19, 19, 145, 0, 4, 13, 12, 13, 145, 0, 3, 12, 0, 0, 19, 51, 51, 35, 51, 51, 35, 145, 51, 4, 27, 27, 145, 11, 3, 9, 13, 13, 145, 12, 4, 145, 13, 3, 37, 37, 145, 12, 5, 0, 145, 12, 6, 37, 37, 29, 145, 12, 3, 0, 145, 12, 5, 20, 20, 145, 12, 6, 13, 53, 53, 37, 61, 29, 35, 11, 0, 0, 13, 13, 12, 12, 13, 9, 0, 11, 0, 11, 35, 51, 27, 11, 19, 35, 35, 43, 51, 35, 27, 27, 35, 35, 51, 51, 35, 27, 19, 145, 13, 7, 29, 29, 145, 12, 5, 0, 0, 12, 12, 0, 145, 12, 3, 13, 37, 29, 145, 12, 3, 0, 0, 12, 20, 44, 60, 60, 145, 12, 7, 13, 53, 53, 145, 37, 3, 35, 19, 0, 145, 12, 8, 0, 27, 51, 27, 14, 0, 0, 27, 51, 35, 11, 145, 0, 3, 10, 11, 11, 27, 35, 51, 51, 35, 27, 17, 145, 13, 4, 37, 29, 13, 145, 12, 5, 0, 145, 12, 3, 0, 145, 12, 3, 37, 29, 13, 12, 12, 20, 44, 145, 60, 5, 145, 12, 6, 9, 0, 37, 53, 53, 37, 61, 37, 35, 27, 11, 12, 12, 0, 0, 145, 12, 3, 35, 51, 27, 12, 145, 0, 3, 27, 51, 27, 145, 0, 6, 9, 145, 11, 3, 35, 51, 51, 43, 35, 11, 13, 13, 37, 37, 13, 145, 12, 5, 0, 145, 12, 3, 0, 0, 145, 12, 3, 37, 29, 44, 44, 145, 60, 7, 145, 0, 6, 12, 0, 37, 145, 53, 3, 37, 37, 29, 37, 35, 27, 19, 145, 11, 3, 19, 35, 35, 11, 145, 0, 5, 27, 35, 11, 145, 0, 6, 9, 145, 11, 5, 35, 145, 51, 3, 35, 21, 29, 29, 13, 145, 12, 5, 0, 12, 20, 12, 0, 145, 12, 4, 44, 60, 60, 44, 36, 36, 145, 20, 3, 36, 60, 13, 145, 0, 5, 13, 9, 37, 145, 53, 5, 37, 37, 29, 37, 29, 145, 35, 4, 27, 10, 145, 0, 4, 12, 12, 27, 35, 11, 145, 0, 7, 10, 11, 9, 0, 13, 11, 27, 35, 35, 51, 35, 61, 29, 13, 145, 12, 5, 0, 12, 20, 145, 12, 4, 20, 60, 60, 44, 20, 12, 145, 20, 5, 12, 20, 13, 13, 9, 0, 0, 9, 0, 21, 53, 37, 29, 145, 37, 3, 145, 53, 3, 37, 61, 29, 37, 13, 12, 145, 0, 3, 145, 12, 5, 27, 35, 10, 145, 0, 7, 10, 11, 10, 0, 0, 9, 11, 27, 145, 35, 3, 43, 29, 13, 145, 12, 5, 0, 12, 20, 145, 12, 3, 36, 60, 44, 20, 145, 12, 4, 145, 20, 3, 145, 12, 3, 9, 145, 13, 3, 0, 0, 21, 53, 37, 37, 13, 13, 29, 37, 53, 145, 37, 5, 53, 37, 29, 37, 13, 12, 0, 9, 145, 13, 3, 27, 35, 14, 145, 0, 8, 10, 11, 11, 0, 9, 9, 19, 145, 35, 3, 10, 13, 13, 145, 12, 6, 20, 20, 12, 12, 44, 60, 20, 0, 145, 12, 5, 20, 14, 145, 12, 4, 0, 0, 9, 13, 13, 29, 37, 37, 145, 13, 5, 37, 37, 29, 145, 12, 3, 13, 37, 29, 37, 53, 37, 29, 13, 12, 145, 13, 3, 19, 35, 10, 145, 0, 8, 11, 10, 10, 0, 13, 0, 27, 35, 35, 19, 12, 12, 13, 13, 145, 12, 5, 145, 20, 3, 44, 60, 20, 145, 12, 7, 14, 14, 0, 145, 12, 3, 145, 29, 4, 37, 37, 29, 12, 145, 13, 4, 29, 37, 29, 12, 145, 0, 3, 145, 12, 4, 13, 29, 37, 53, 37, 29, 13, 13, 11, 35, 27, 145, 0, 9, 14, 11, 0, 0, 10, 35, 35, 145, 13, 3, 12, 13, 37, 13, 145, 12, 4, 20, 36, 60, 60, 36, 12, 20, 145, 12, 12, 145, 29, 4, 13, 13, 9, 13, 9, 145, 13, 3, 29, 37, 13, 0, 145, 12, 3, 0, 145, 12, 5, 13, 29, 145, 37, 3, 29, 13, 19, 35, 11, 145, 0, 8, 12, 14, 0, 0, 19, 35, 11, 145, 13, 4, 12, 13, 29, 37, 12, 12, 20, 44, 145, 60, 3, 20, 20, 145, 12, 8, 20, 145, 12, 4, 20, 9, 13, 0, 0, 145, 9, 5, 13, 13, 29, 37, 12, 0, 145, 12, 3, 0, 0, 145, 12, 3, 0, 12, 12, 13, 29, 145, 37, 3, 29, 27, 35, 11, 145, 0, 10, 11, 35, 27, 12, 12, 145, 13, 5, 12, 36, 29, 44, 145, 60, 5, 20, 145, 12, 14, 20, 12, 145, 9, 8, 13, 9, 29, 61, 12, 0, 12, 13, 145, 0, 3, 145, 12, 3, 145, 0, 4, 12, 29, 145, 37, 3, 61, 27, 35, 34, 14, 14, 12, 12, 145, 0, 4, 10, 35, 27, 12, 12, 145, 13, 4, 20, 36, 44, 145, 60, 8, 44, 145, 12, 4, 145, 0, 4, 10, 145, 12, 5, 52, 60, 145, 9, 5, 11, 27, 27, 35, 11, 21, 29, 12, 0, 12, 145, 0, 5, 145, 12, 3, 145, 0, 4, 13, 145, 37, 3, 29, 13, 19, 145, 27, 3, 10, 14, 0, 0, 14, 11, 35, 27, 10, 0, 0, 12, 36, 44, 60, 60, 44, 145, 60, 6, 44, 44, 60, 60, 36, 0, 145, 12, 12, 53, 44, 20, 145, 9, 3, 11, 59, 51, 51, 59, 59, 13, 29, 13, 145, 0, 7, 145, 12, 3, 145, 0, 4, 13, 37, 37, 61, 30, 38, 38, 14, 11, 27, 35, 145, 27, 4, 35, 27, 12, 0, 12, 36, 145, 60, 3, 36, 12, 20, 20, 36, 145, 60, 5, 44, 36, 60, 60, 20, 0, 0, 145, 12, 9, 20, 29, 44, 60, 13, 9, 17, 27, 35, 51, 59, 51, 59, 35, 45, 37, 145, 0, 8, 145, 12, 3, 145, 0, 3, 29, 37, 61, 145, 38, 3, 54, 54, 14, 0, 10, 11, 11, 19, 11, 10, 0, 12, 36, 60, 60, 36, 29, 13, 145, 20, 5, 36, 60, 60, 44, 36, 20, 0, 12, 44, 60, 36, 12, 145, 0, 6, 12, 12, 36, 60, 36, 53, 44, 36, 13, 11, 145, 35, 3, 27, 43, 59, 51, 51, 37, 12, 0, 9, 145, 0, 5, 145, 12, 3, 0, 0, 12, 37, 61, 38, 22, 145, 14, 3, 54, 54, 145, 12, 4, 0, 0, 12, 20, 60, 60, 36, 12, 13, 145, 20, 8, 44, 60, 20, 145, 0, 4, 12, 36, 60, 44, 20, 145, 12, 4, 20, 44, 145, 60, 3, 36, 37, 44, 60, 13, 33, 57, 27, 145, 11, 3, 19, 33, 43, 37, 37, 12, 145, 0, 6, 145, 12, 3, 0, 0, 29, 45, 30, 14, 0, 12, 145, 14, 3, 54, 30, 0, 145, 12, 4, 44, 60, 60, 20, 12, 145, 20, 8, 12, 0, 36, 60, 20, 0, 145, 12, 3, 0, 0, 12, 36, 145, 44, 4, 60, 60, 44, 44, 60, 29, 36, 37, 44, 52, 44, 11, 27, 11, 13, 9, 0, 145, 9, 3, 145, 37, 3, 13, 145, 0, 6, 12, 12, 0, 29, 29, 30, 30, 9, 13, 12, 12, 14, 12, 38, 54, 14, 12, 12, 20, 44, 60, 60, 20, 12, 145, 20, 5, 12, 20, 20, 12, 0, 0, 20, 60, 20, 0, 145, 12, 5, 0, 0, 12, 20, 36, 36, 10, 10, 145, 34, 3, 12, 13, 52, 44, 52, 36, 33, 27, 9, 13, 9, 145, 0, 4, 14, 37, 37, 61, 45, 13, 13, 145, 0, 3, 12, 12, 37, 29, 12, 30, 14, 0, 12, 0, 12, 12, 14, 14, 54, 38, 9, 20, 145, 60, 3, 36, 20, 20, 145, 12, 6, 20, 12, 145, 0, 3, 12, 60, 36, 0, 145, 12, 5, 0, 12, 13, 36, 13, 13, 10, 145, 34, 3, 10, 12, 29, 44, 44, 36, 52, 57, 33, 9, 13, 9, 14, 145, 0, 5, 12, 19, 35, 35, 29, 145, 13, 3, 145, 37, 3, 12, 14, 30, 14, 145, 0, 4, 12, 14, 14, 30, 54, 22, 20, 44, 44, 60, 20, 12, 12, 145, 0, 4, 12, 20, 12, 145, 0, 4, 12, 60, 36, 145, 12, 6, 20, 36, 36, 13, 13, 10, 34, 50, 2, 10, 8, 9, 52, 44, 145, 36, 4, 37, 9, 0, 9, 9, 0, 0, 12, 12, 145, 0, 3, 10, 19, 27, 145, 13, 4, 12, 0, 0, 14, 30, 12, 145, 0, 5, 12, 14, 14, 38, 54, 14, 20, 44, 60, 20, 0, 12, 145, 0, 3, 145, 12, 3, 145, 0, 5, 12, 60, 20, 145, 12, 5, 145, 36, 6, 10, 34, 50, 34, 16, 16, 17, 60, 60, 44, 60, 20, 36, 36, 44, 12, 145, 9, 3, 145, 0, 7, 11, 35, 19, 11, 3, 3, 11, 11, 19, 35, 30, 12, 0, 145, 12, 6, 14, 14, 54, 38, 12, 12, 44, 44, 145, 0, 5, 145, 12, 3, 145, 0, 5, 20, 44, 145, 12, 4, 20, 145, 36, 5, 13, 12, 10, 50, 42, 34, 16, 32, 56, 11, 29, 44, 36, 60, 20, 36, 44, 60, 12, 0, 9, 145, 0, 7, 3, 11, 27, 35, 11, 11, 27, 145, 35, 3, 38, 12, 0, 0, 9, 0, 145, 12, 4, 14, 30, 54, 14, 0, 20, 60, 20, 145, 0, 3, 145, 12, 4, 145, 0, 4, 12, 44, 36, 2, 145, 12, 3, 36, 28, 60, 28, 12, 10, 2, 2, 26, 50, 26, 8, 16, 40, 56, 0, 11, 37, 60, 36, 36, 44, 44, 52, 36, 36, 0, 9, 12, 145, 0, 5, 3, 11, 27, 11, 35, 27, 19, 19, 11, 11, 38, 14, 0, 0, 9, 9, 0, 0, 145, 12, 3, 22, 46, 14, 12, 12, 36, 44, 12, 12, 0, 145, 12, 3, 145, 0, 5, 36, 44, 12, 4, 12, 36, 44, 60, 36, 52, 28, 12, 4, 2, 10, 34, 50, 42, 8, 8, 16, 32, 12, 0, 17, 37, 44, 36, 60, 20, 28, 36, 44, 60, 12, 9, 11, 145, 0, 4, 11, 35, 27, 145, 11, 3, 59, 27, 27, 11, 38, 38, 145, 0, 3, 9, 145, 0, 3, 12, 12, 22, 38, 145, 12, 4, 36, 36, 145, 12, 5, 145, 0, 3, 12, 36, 44, 12, 2, 20, 145, 36, 6, 145, 12, 4, 58, 145, 50, 3, 18, 145, 8, 3, 0, 0, 11, 36, 36, 29, 13, 12, 0, 0, 19, 60, 36, 14, 9, 14, 0, 0, 14, 27, 27, 59, 59, 43, 35, 59, 145, 27, 4, 58, 38, 12, 145, 0, 6, 12, 38, 38, 14, 12, 12, 14, 12, 44, 36, 145, 12, 4, 0, 0, 20, 44, 36, 12, 2, 18, 145, 34, 3, 58, 50, 145, 34, 6, 50, 50, 34, 50, 50, 10, 8, 8, 11, 9, 44, 44, 36, 0, 145, 13, 3, 9, 0, 9, 145, 36, 3, 12, 14, 11, 27, 27, 35, 27, 27, 59, 35, 145, 11, 3, 9, 17, 33, 41, 38, 22, 14, 12, 12, 14, 22, 54, 54, 38, 30, 14, 0, 145, 12, 3, 36, 44, 145, 20, 4, 44, 44, 20, 2, 10, 18, 34, 26, 34, 50, 34, 26, 18, 18, 26, 34, 50, 145, 34, 3, 18, 34, 34, 50, 26, 2, 0, 11, 44, 60, 0, 0, 13, 13, 12, 13, 13, 12, 12, 36, 36, 60, 27, 11, 11, 9, 3, 11, 35, 43, 19, 145, 3, 3, 9, 12, 9, 17, 29, 38, 54, 145, 38, 4, 54, 54, 145, 38, 3, 14, 12, 9, 0, 12, 20, 145, 44, 3, 36, 20, 2, 2, 10, 34, 58, 34, 34, 26, 10, 145, 2, 5, 10, 34, 50, 26, 145, 10, 4, 26, 34, 34, 0, 44, 36, 14, 145, 0, 4, 145, 12, 6, 44, 52, 44, 145, 0, 3, 3, 3, 11, 43, 11, 145, 3, 3, 0, 9, 0, 0, 9, 33, 57, 57, 38, 14, 12, 14, 38, 38, 145, 54, 4, 30, 12, 0, 0, 12, 12, 145, 2, 3, 10, 34, 58, 34, 34, 26, 10, 2, 2, 5, 145, 0, 3, 9, 10, 26, 50, 34, 145, 10, 6, 26, 9, 60, 36, 145, 0, 5, 145, 12, 7, 44, 36, 36, 145, 0, 4, 11, 19, 145, 0, 6, 9, 145, 0, 3, 9, 11, 38, 38, 44, 13, 22, 38, 145, 14, 3, 30, 54, 38, 14, 0, 0, 2, 2, 10, 58, 34, 34, 26, 10, 10, 145, 2, 3, 145, 0, 6, 10, 10, 34, 34, 10, 13, 13, 145, 10, 4, 11, 60, 14, 145, 0, 5, 12, 12, 0, 0, 145, 12, 4, 37, 60, 14, 145, 0, 3, 11, 19, 145, 0, 7, 12, 145, 0, 5, 20, 44, 38, 38, 14, 0, 0, 145, 14, 3, 46, 38, 12, 0, 10, 26, 34, 34, 26, 10, 10, 145, 2, 3, 145, 0, 8, 2, 2, 26, 34, 10, 145, 13, 6, 11, 60, 14, 145, 0, 5, 12, 12, 145, 0, 3, 145, 12, 3, 13, 60, 60, 12, 0, 0, 11, 19, 145, 0, 13, 10, 34, 46, 30, 145, 0, 3, 12, 145, 14, 3, 38, 22, 13, 58, 34, 26, 34, 10, 145, 2, 4, 145, 0, 9, 2, 2, 34, 26, 10, 13, 9, 145, 13, 4, 9, 60, 14, 145, 0, 5, 12, 12, 145, 0, 4, 145, 12, 3, 45, 60, 36, 145, 0, 3, 11, 9, 145, 0, 12, 11, 14, 30, 14, 145, 0, 4, 12, 14, 12, 22, 38, 44, 26, 42, 34, 10, 145, 2, 3, 145, 0, 11, 2, 2, 10, 10, 2, 145, 13, 5, 9};
byte bmpGlasses[80*50];

// Hills
byte compHills[] = {145, 59, 134, 51, 145, 59, 78, 47, 47, 55, 145, 59, 76, 47, 39, 47, 55, 55, 145, 59, 15, 51, 51, 145, 59, 57, 47, 31, 39, 145, 47, 3, 63, 145, 59, 6, 43, 59, 51, 59, 59, 51, 27, 145, 39, 3, 47, 47, 145, 59, 54, 55, 15, 39, 31, 145, 47, 4, 145, 59, 5, 47, 31, 47, 55, 47, 31, 23, 31, 39, 145, 47, 5, 55, 145, 59, 51, 51, 23, 23, 31, 31, 145, 47, 5, 145, 59, 4, 31, 39, 47, 39, 23, 15, 23, 31, 145, 39, 3, 145, 47, 5, 63, 145, 59, 45, 55, 55, 47, 31, 145, 23, 3, 31, 31, 39, 145, 47, 3, 39, 63, 59, 59, 39, 31, 39, 39, 15, 23, 40, 23, 39, 39, 31, 145, 39, 3, 145, 47, 5, 63, 145, 59, 20, 51, 145, 59, 19, 63, 47, 47, 55, 55, 47, 145, 31, 6, 39, 145, 47, 5, 63, 55, 145, 31, 4, 15, 15, 16, 145, 31, 4, 39, 39, 47, 47, 31, 39, 145, 47, 3, 55, 145, 59, 16, 51, 23, 15, 23, 47, 145, 59, 17, 39, 39, 47, 145, 55, 3, 47, 145, 31, 5, 39, 39, 145, 47, 5, 55, 55, 47, 145, 23, 3, 31, 40, 7, 39, 31, 31, 23, 39, 47, 47, 39, 23, 39, 47, 55, 145, 47, 5, 63, 55, 55, 31, 39, 47, 47, 55, 63, 55, 39, 31, 31, 32, 0, 8, 15, 39, 47, 55, 55, 47, 51, 145, 59, 10, 63, 145, 39, 3, 47, 55, 47, 55, 47, 145, 31, 6, 39, 145, 47, 6, 55, 55, 23, 23, 31, 31, 16, 40, 39, 31, 31, 15, 31, 47, 47, 31, 48, 31, 39, 39, 145, 47, 4, 39, 31, 31, 15, 31, 39, 47, 39, 39, 31, 31, 39, 31, 39, 7, 0, 7, 23, 145, 47, 5, 39, 145, 59, 9, 63, 31, 145, 39, 3, 145, 55, 4, 39, 145, 31, 5, 39, 39, 145, 47, 6, 55, 39, 23, 23, 39, 15, 8, 23, 145, 31, 3, 15, 31, 39, 47, 23, 40, 31, 31, 26, 34, 42, 47, 39, 39, 31, 39, 47, 23, 40, 31, 31, 39, 39, 47, 39, 39, 31, 32, 15, 23, 39, 145, 47, 5, 39, 63, 145, 59, 7, 47, 23, 31, 39, 39, 145, 47, 3, 55, 47, 39, 145, 31, 6, 39, 145, 47, 7, 23, 23, 31, 39, 48, 16, 145, 31, 4, 15, 23, 31, 47, 15, 34, 145, 26, 4, 34, 42, 42, 34, 34, 47, 31, 32, 15, 39, 39, 47, 47, 39, 39, 31, 23, 48, 23, 23, 39, 39, 47, 47, 55, 145, 47, 3, 63, 59, 59, 51, 51, 39, 31, 23, 23, 31, 39, 31, 39, 145, 47, 5, 39, 31, 39, 31, 31, 145, 39, 3, 145, 47, 5, 23, 15, 23, 31, 39, 40, 32, 23, 145, 39, 3, 18, 18, 26, 34, 18, 34, 18, 26, 18, 26, 34, 42, 34, 26, 42, 34, 16, 7, 23, 31, 47, 47, 39, 31, 145, 23, 3, 15, 39, 145, 31, 3, 39, 47, 55, 55, 145, 47, 3, 55, 145, 39, 4, 31, 23, 23, 145, 31, 3, 39, 39, 145, 47, 4, 39, 34, 34, 145, 26, 3, 34, 39, 145, 47, 5, 23, 15, 15, 31, 31, 7, 40, 23, 145, 39, 3, 26, 18, 26, 34, 18, 42, 18, 26, 10, 26, 26, 34, 26, 18, 34, 18, 2, 34, 34, 10, 42, 42, 26, 18, 34, 10, 18, 42, 31, 31, 23, 39, 31, 39, 47, 47, 55, 145, 47, 7, 39, 31, 23, 145, 31, 3, 39, 39, 47, 47, 42, 42, 145, 34, 4, 26, 145, 34, 3, 145, 42, 4, 47, 23, 48, 15, 31, 23, 7, 15, 23, 39, 31, 47, 34, 18, 26, 34, 26, 50, 26, 18, 10, 26, 18, 34, 26, 18, 34, 10, 18, 34, 42, 10, 34, 42, 26, 42, 2, 10, 50, 10, 26, 26, 23, 31, 23, 31, 55, 39, 55, 55, 145, 47, 7, 145, 39, 3, 31, 145, 39, 3, 47, 47, 42, 42, 145, 34, 4, 26, 145, 34, 6, 50, 47, 23, 15, 15, 31, 15, 145, 23, 3, 34, 26, 42, 34, 145, 26, 4, 18, 18, 10, 18, 26, 18, 26, 26, 18, 34, 42, 34, 42, 2, 18, 34, 145, 42, 3, 34, 18, 42, 34, 10, 34, 34, 18, 18, 10, 42, 34, 42, 50, 50, 145, 42, 3, 34, 145, 42, 3, 145, 39, 4, 145, 47, 4, 42, 42, 145, 34, 8, 42, 42, 34, 42, 42, 10, 10, 18, 10, 10, 26, 18, 18, 34, 34, 42, 34, 34, 145, 26, 3, 18, 10, 42, 22, 26, 18, 18, 26, 18, 34, 50, 145, 2, 3, 34, 34, 42, 50, 10, 34, 50, 18, 50, 18, 18, 26, 26, 10, 34, 26, 34, 34, 145, 42, 8, 34, 34, 26, 26, 34, 145, 42, 6, 145, 34, 8, 145, 42, 3, 34, 34, 145, 10, 3, 34, 10, 26, 18, 18, 34, 26, 42, 34, 34, 145, 26, 4, 10, 42, 14, 30, 22, 30, 22, 10, 34, 18, 34, 2, 2, 50, 34, 34, 50, 26, 2, 18, 18, 50, 18, 2, 18, 34, 10, 10, 18, 18, 26, 34, 42, 145, 26, 3, 34, 145, 42, 3, 34, 26, 26, 34, 145, 42, 6, 34, 145, 38, 7, 145, 42, 3, 34, 26, 18, 10, 50, 2, 10, 26, 18, 18, 34, 26, 42, 145, 34, 3, 26, 26, 38, 22, 46, 22, 38, 22, 30, 22, 54, 30, 26, 10, 2, 2, 50, 34, 34, 42, 42, 10, 18, 2, 18, 50, 10, 26, 26, 18, 50, 42, 10, 26, 34, 26, 26, 34, 26, 145, 34, 3, 42, 34, 26, 26, 34, 145, 42, 6, 145, 38, 8, 46, 42, 42, 34, 18, 26, 10, 50, 2, 10, 26, 18, 18, 26, 26, 42, 42, 34, 34, 145, 38, 3, 30, 46, 22, 38, 22, 30, 22, 14, 30, 30, 145, 6, 3, 38, 38, 145, 46, 3, 22, 22, 14, 54, 6, 14, 38, 30, 38, 14, 6, 46, 14, 145, 30, 3, 46, 145, 38, 3, 30, 38, 38, 30, 30, 38, 46, 54, 145, 46, 6, 145, 38, 6, 46, 54, 46, 38, 22, 30, 14, 46, 6, 14, 30, 14, 22, 30, 22, 145, 46, 3, 145, 38, 4, 30, 22, 30, 38, 22, 30, 22, 14, 30, 38, 22, 14, 38, 22, 38, 145, 46, 3, 22, 6, 14, 6, 6, 22, 30, 30, 38, 30, 14, 54, 14, 30, 30, 22, 145, 38, 4, 30, 38, 38, 22, 22, 38, 38, 145, 46, 8, 145, 38, 5, 46, 46, 38, 30, 22, 22, 14, 46, 38, 22, 22, 14, 22, 30, 30, 38, 46, 46, 30, 145, 38, 4, 22, 30, 46, 30, 30, 22, 54, 22, 30, 54, 22, 6, 22, 38, 46, 38, 38, 30, 46, 14, 6, 6, 14, 14, 30, 38, 30, 46, 46, 14, 22, 30, 14, 145, 22, 3, 30, 30, 38, 30, 22, 22, 38, 46, 38, 38, 145, 46, 6, 38, 46, 46, 38, 38, 46, 46, 38, 30, 22, 22, 14, 54, 14, 22, 22, 14, 22, 22, 30, 38, 46, 46, 38, 145, 30, 3, 38, 22, 30, 38, 38, 30, 22, 145, 14, 3, 22, 30, 6, 6, 38, 38, 30, 38, 22, 46, 54, 6, 14, 22, 14, 30, 38, 30, 14, 22, 22, 6, 145, 14, 3, 46, 22, 30, 22, 30, 38, 30, 30, 145, 38, 6, 145, 46, 4, 145, 38, 3, 30, 145, 38, 4, 30, 30, 145, 22, 4, 30, 22, 22, 145, 30, 3, 38, 38, 46, 38, 38, 30, 38, 30, 22};
byte bmpHills[80*25];

byte compSmallIcon[] = {145, 0, 44, 63, 145, 0, 28, 63, 47, 63, 145, 0, 27, 63, 23, 63, 23, 145, 0, 25, 63, 47, 16, 0, 63, 145, 0, 25, 63, 23, 0, 0, 15, 63, 145, 0, 23, 63, 15, 145, 0, 4, 63, 23, 145, 0, 21, 63, 47, 16, 145, 0, 4, 23, 63, 145, 0, 21, 63, 23, 145, 0, 6, 15, 63, 145, 0, 19, 63, 55, 145, 0, 8, 63, 23, 60, 60, 52, 36, 28, 12, 145, 0, 12, 63, 31, 0, 0, 8, 145, 0, 5, 23, 63, 145, 60, 6, 52, 44, 36, 145, 0, 7, 15, 145, 63, 5, 15, 145, 0, 6, 63, 54, 54, 145, 62, 3, 54, 145, 38, 3, 0, 0, 15, 145, 63, 6, 145, 0, 5, 8, 145, 0, 6, 63, 59, 59, 51, 51, 58, 38, 46, 54, 145, 63, 3, 16, 145, 0, 3, 63, 31, 145, 0, 12, 23, 63, 45, 51, 59, 59, 51, 51, 58, 145, 0, 6, 63, 23, 145, 0, 14, 63, 48, 145, 37, 3, 53, 45, 59, 145, 0, 6, 63, 7, 145, 0, 14, 31, 63, 145, 0, 3, 37, 37, 45, 145, 0, 5, 63, 31, 145, 0, 16, 23, 63, 145, 0, 4, 37, 145, 0, 4, 63, 55, 145, 0, 18, 63, 48, 145, 0, 8, 63, 39, 145, 0, 18, 31, 63, 145, 0, 7, 63, 31, 8, 145, 0, 19, 23, 63, 145, 0, 5, 16, 63, 145, 0, 22, 63, 145, 0, 5, 145, 63, 26, 145, 0, 4, 145, 7, 25, 16, 0, 0};
byte bmpSmallIcon[23*20];

byte mdlGlobe[] = {79, 39, 78, 39, 74, 35, 74, 29, 75, 24, 77, 18, 76, 13, 73, 9, 70, 4, 71, 0, 73, -7, 78, -10, 83, -9, 88, -7, 91, 0, 96, 1, 101, 3, 103, 8, 99, 13, 96, 17, 92, 22, 88, 26, 83, 29, 80, 33, 79, 38, -2, 72, -6, 72, -6, 66, -8, 63, -12, 57, -13, 53, -15, 49, -20, 45, -23, 47, -18, 50, -13, 46, -17, 43, -22, 40, -27, 37, -32, 36, -37, 31, -41, 26, -44, 20, -44, 18, -39, 12, -40, 8, -44, 6, -50, 12, -51, 18, -50, 24, -50, 29, -51, 35, -51, 41, -51, 48, -51, 44, -55, 38, -56, 44, -58, 49, -58, 55, -57, 60, -57, 65, -56, 71, -55, 76, -53, 81, -52, 87, -50, 84, -45, 79, -45, 73, -46, 68, -48, 62, -48, 61, -43, 65, -40, 71, -41, 75, -45, 80, -44, 85, -41, 89, -37, 90, -32, 84, -32, 79, -32, 75, -28, 71, -24, 71, -18, 66, -21, 60, -21, 61, -15, 66, -13, 70, -9, 73, -5, -2, 130, -5, 130, -5, 134, 0, 136, 5, 137, 10, 138, 15, 138, 21, 142, 24, 148, 25, 151, 20, 152, 15, 156, 10, 157, 5, 157, 0, 162, -4, 165, -9, 159, -8, 155, -13, 152, -17, 156, -13, 161, -10, 166, -13, 169, -17, 164, -18, 162, -23, 167, -21, 172, -18, 177, -18, 178, -13, 180, -7, 184, -11, 188, -16, 193, -17, 198, -15, 198, -9, 199, -4, 193, -5, 197, 0, 201, 4, 206, 7, 211, 8, 217, 8, 211, 6, 206, 5, 201, 1, 199, -4, 200, -9, 205, -8, 203, -14, 209, -16, 213, -20, 215, -25, 219, -29, 225, -28, 229, -32, 226, -37, 229, -42, 235, -42, 241, -42, 239, -37, 243, -40, 248, -43, 253, -45, 251, -50, 245, -50, 240, -51, 235, -50, 230, -51, 224, -51, 218, -52, 213, -53, 208, -54, 202, -55, 197, -55, 192, -54, 186, -53, 181, -52, 176, -51, 171, -50, 165, -48, 160, -47, 155, -47, 149, -47, 144, -50, 139, -51, 133, -50, 129, -46, 133, -42, 138, -39, 141, -44, 144, -40, 139, -38, 133, -38, 129, -36, 123, -33, 118, -31, 121, -27, 126, -27, 130, -31, 135, -32, 139, -27, 143, -30, 148, -27, 153, -25, 148, -22, 142, -22, 138, -25, 132, -27, 126, -27, 121, -27, 118, -22, 116, -16, 115, -11, 116, -6, 121, -3, 126, 0, 131, -5, -2, 124, -44, 124, -44, 124, -38, 130, -38, 126, -42, -2, 122, -40, 121, -39, 122, -40, -2, 208, 15, 208, 15, 214, 14, 216, 9, 222, 10, 226, 7, 226, 13, 228, 7, 231, 12, 235, 16, 235, 22, 232, 26, 226, 25, 222, 22, 216, 22, 211, 23, 207, 18, -2, 246, 31, 246, 31, 249, 26, 0, 29, 249, 31, -2, 1, 55, 2, 55, 7, 57, 13, 57, 19, 55, 26, 55, 31, 55, 37, 55, 43, 55, 49, 55, 55, 54, 60, 53, 66, 53, 72, 53, 75, 48, 80, 46, 86, 46, 87, 52, 91, 54, 97, 55, 103, 55, 108, 54, 113, 53, 118, 52, 124, 51, 130, 51, 135, 51, 141, 50, 146, 50, 151, 48, 158, 48, 163, 48, 168, 47, 174, 48, 179, 48, 184, 49, 190, 48, 195, 46, 201, 46, 207, 46, 212, 46, 218, 46, 224, 46, 230, 47, 235, 48, 240, 48, 245, 50, 246, 55, 251, 55, 257, 56, -2, 80, -58, 80, -58, 86, -58, 92, -58, 99, -58, 104, -58, 109, -60, 115, -60, 113, -55, 108, -52, 105, -47, 99, -47, 94, -44, 90, -48, 89, -54, 83, -55, -2, 109, -47, 110, -47, 116, -47, 111, -44, 108, -49, -1};


int clipVal(int v, int c) {
	while (v<0) v+=c;
	while (v>=c) v-=c;
	return v;
}

bool compareCharInfo(CHAR_INFO a, CHAR_INFO b) {
	if (a.Attributes==b.Attributes && a.Char.AsciiChar==b.Char.AsciiChar) {
		return true;
	} else {
		return false;
	}
}

void getPixelInfo(CHAR_INFO ch, int out[]) {
	out[0]=0;
	out[1]=0;
	for (int b=0; b<8; ++b) for (int c=7; c>=0; --c) {
		if (compareCharInfo(palette[c][b],ch)) {
			out[0] = c;
			out[1] = b;
			break;
		}
	}
}


CHAR_INFO getPalette(int pxl) {
	int colour = pxl&7;
	int brightness = (pxl>>3)&7;
	return palette[colour][brightness];
}

void clearBuffer(int colour) {
	for (int i=0; i<80*50; ++i) chars[i] = getPalette(colour);
}

// ROW SHIFTS:

void shiftRowLeft(int r, int c) {
	int i = r*80;
	for (int x=0; x<79; ++x) {
		chars[i]=chars[i+1];
		i++;
	}
	chars[i]=getPalette(c);
}

void shiftRowRight(int r, int c) {
	int i = (r*80)+79;
	for (int x=0; x<79; ++x) {
		chars[i]=chars[i-1];
		i--;
	}
	chars[i]=getPalette(c);
}

void shiftRow(int r, int d, int c) {
	if (d>0) {
		for (int i=0; i<d; ++i) shiftRowLeft(r,c);
	} else {
		for (int i=0; i>d; --i) shiftRowRight(r,c);
	}
}

// COL SHIFTS:

void shiftColUp(int r, int c) {
	int i = r;
	for (int x=0; x<49; ++x) {
		chars[i]=chars[i+80];
		i+=80;
	}
	chars[i]=getPalette(c);
}

void shiftColDown(int r, int c) {
	int i = r+(80*48);
	for (int x=0; x<48; ++x) {
		chars[i]=chars[i-80];
		i-=80;
	}
	chars[i]=getPalette(c);
}

void shiftCol(int r, int d, int c) {
	if (d>0) {
		for (int i=0; i<d; ++i) shiftColUp(r,c);
	} else {
		for (int i=0; i>d; --i) shiftColDown(r,c);
	}
}


void decompressData(byte in[], byte out[], int dataLength) {
	int f = 0;
	int t = 0;
	while (t<dataLength) {
		int x = in[f++];
		if (x==0x91) {
			x = in[f++];
			int r = in[f++];
			for (int c=0; c<r; c++) {
				out[t++] = x;
			}
		} else {
			out[t++] = x;
		}
	}
}

// Function to copy the character buffer to the console
void copyBufferToScreen() {
	WriteConsoleOutput(wHnd, (const CHAR_INFO *)(&chars), coord, coord2, &write);
}


// Function to draw a line between two points
// It's the Bresenham algorithm, as you might have guessed!
void drawLine(int x1, int y1, int x2, int y2, CHAR_INFO colour) {
	int deltax = abs(x2 - x1);
	int deltay = abs(y2 - y1);
	int x = x1;
	int y = y1;
	int xinc1;
	int xinc2;
	int yinc1;
	int yinc2;
	int den;
	int num;
	int numadd;
	int numpixels;

	if (x2>=x1) {
		xinc1 = 1;
		xinc2 = 1;
	} else {
		xinc1 = -1;
		xinc2 = -1;
	}

	if (y2>=y1) {
		yinc1 = 1;
		yinc2 = 1;
	} else {
		yinc1 = -1;
		yinc2 = -1;
	}

	if (deltax>=deltay) {
		xinc1 = 0;
		yinc2 = 0;
		den = deltax;
		num = deltax / 2;
		numadd = deltay;
		numpixels = deltax;
	} else {
		xinc2 = 0;
		yinc1 = 0;
		den = deltay;
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;
	}

	for (int curpixel=0; curpixel<=numpixels; curpixel++) {
		if (x>=0 && x<80 && y>=0 && y<50) chars[x+y*80] = colour;
		num += numadd;
		if (num >= den) {
			num -= den;
			x += xinc1;
			y += yinc1;
		}
		x += xinc2;
		y += yinc2;
	}

}

void pause(long time) {	Sleep(time); }






void vPutCScale(int x, int y, char c, float s) {
	int ch = (int)c-(int)' ';

	if (ch>=0 && ch<95) {
		ch = (ch % 36)*7+(ch / 36)*252*7;
		for (int cY=0; cY<7*s; ++cY) {
			int i=x+(cY+y)*80;
			if (cY+y >=0 && cY+y<50) {
				for (int cX=0; cX<7*s; ++cX) {
					if (cX+x>=0 && cX+x<80) {
						int p = smallFont[ch+(int)(cY/s)*252+(int)(cX/s)];
						if (p!=255) chars[i] = getPalette(p);
					}
					i++;
				}
			}
		}
	}
}

void vPutC(int x, int y, char c) {
	vPutCScale(x,y,c,1);
}

void vPutCScaleCentred(int x, int y, char c, float s) {
	vPutCScale(x-(7*s)/2,y-(7*s)/2,c,s);
}

void vPutS(int x, int y, char s[]) {
	int p = 0;
	int oX = x;
	while (s[p]) {
		if (s[p]=='\n') {
			x = oX;
			y+=8;
		} else {
			vPutC(x,y,s[p]);
			x+=8;
		}
		p++;
	}
}

void getEvents() {

	DWORD num, cNumRead;
	cNumRead = 0;

	GetNumberOfConsoleInputEvents(rHnd, &num);

	INPUT_RECORD irInBuf[128];

	if (num != 0) ReadConsoleInput(rHnd,irInBuf,128,&cNumRead);

	for (int i=0; i<cNumRead; i++) {
		if (irInBuf[i].EventType==KEY_EVENT) {
			allKeys[(int)irInBuf[i].Event.KeyEvent.wVirtualKeyCode%0xFF] = irInBuf[i].Event.KeyEvent.bKeyDown;
		}
	}
}

void tunnelEffect() {


	char msg[] = "            The 3D tunnel effect is one that is loved by many, as it's surprisingly simple to code! As you might have noticed, this entire 'scene demo' is anything but complicated... Not to mention the mild overuse of sine and cosine functions! Oh, this one is semi-interactive. Have a play with those cursor keys, I dare you!            #";
	int msgOffset = 0;
	int msgX = 0;
	int loop = 0;

	// Variables for 3D tunnel effect:
	float a_L[80*50];
	float z_L[80*50];

	// Build lookups:
	for(int x=0; x<80; ++x) {
		
		for(int y=0; y<50; ++y) {
			float x_A = x - 40;
			float y_A = (float)((float)y - 25)*(float)(9.0/8.0);
            
			float point_A = 0;
                 
			if((int)y_A==0) {
				if (x_A > 0) {
					point_A = PI/2;
				} else {
					point_A = -PI/2;
				}
			} else {
                point_A = atan(x_A /y_A);
			}
            
			if (y_A < 0) point_A += PI;
			a_L[x+y*80] = point_A;
			z_L[x+y*80] = 64 / sqrt(pow(y_A,2) + pow(x_A,2));    
		}
	}

	// Render tunnel:

	float offsetAngle = 0;
	float offsetDistance = 0;
	long lastFrame = GetTickCount();

	while (1) {
		for (int i=0; i<80*50; ++i) {
			int angle = (int)((float)(a_L[i]+offsetAngle)*(float)8/(float)PI);
			int dist = (int)((float)(z_L[i]+offsetDistance));

			int getColour = angle+dist;

			int colour = getColour & 7;

		
			char c;
			if (z_L[i]<2) {
				c = 219;
			} else if (z_L[i]<3) {
				c = 178;
			} else if (z_L[i]<5) {
				c = 177;
			} else if (z_L[i]<15) {
				c = 176;
			} else {
				c = ' ';
			}

			if (z_L[i]<4) {
				colour|=FOREGROUND_INTENSITY;		
			}

			if (z_L[i]<8) {
				colour|=((colour&7)<<4);
			}

			chars[i].Char.AsciiChar = c;
			chars[i].Attributes = colour;
		}


		if (!allKeys[VK_SPACE]) {
			for (int x=0; x<13 && msg[x+msgOffset]; ++x) {
				vPutC(x*7-msgX, (int)20+10*sin((((float)x-(float)msgX/7)-(float)loop/10)/2), msg[x+msgOffset]);
			}
		}

		copyBufferToScreen();

		pause(12);
		
		loop++;

		if (!(loop%2)) {
			msgX++;
			if (msgX==9) {
				msgX=0;
				msgOffset++;
				if (msg[msgOffset+12]=='#') msgOffset=0;
			}
		}


		float newFrame = (float)(GetTickCount()-lastFrame)/(float)1000;


		if (!allKeys[VK_LEFT] && !allKeys[VK_RIGHT] && !allKeys[VK_UP] && !allKeys[VK_DOWN]) {
			offsetAngle+=newFrame;
			offsetDistance+=newFrame;
		} else {
			if (allKeys[VK_LEFT]) offsetAngle+=newFrame;
			if (allKeys[VK_RIGHT]) offsetAngle-=newFrame;
			if (allKeys[VK_UP]) offsetDistance+=newFrame;
			if (allKeys[VK_DOWN]) offsetDistance-=newFrame;
		}

		getEvents();
		lastFrame = GetTickCount();
		if (allKeys[VK_ESCAPE]) break;
	}

}



void plasmaEffect() {

	float a = 0;
	float b = 0;
	float c = 0;

	int timeUntilNextFade = 1;
	int fadeInText = -80;

	long lastFrame = GetTickCount();

	char msg[7][64];
	strcpy(msg[0]," No demo\nwith  any\n  self-\nrespect's\ncomplete\nwithout a");
	strcpy(msg[1],"\n+-------+\n|Plasma!|\n+-------+");
	strcpy(msg[2],"\nIt's  the\n fourth\nstate  of\n matter.");
	strcpy(msg[3],"\n 99%  of\nthe known\nuniverse\nis plasma");
	strcpy(msg[4],"Lightning\n Aurora\nborealis,\nthe solar\nwind, and\n nebulae.");
	strcpy(msg[5]," The Sun\n  is an \n example\nof a  hot\n plasma!");
	strcpy(msg[6],"A  plasma\nis a good\nelectric\npotential\nconductor");

	int curMsg = 0;


	while (1) {

		clearBuffer(10);

		if (!allKeys[VK_SPACE]) {
			vPutS(4,1,msg[curMsg]);

			for (int i=0; i<50; ++i) {
				if (i & 1) {
					shiftRow(i, fadeInText, 10);
				} else {
					shiftRow(i, -fadeInText, 10);
				}
			}

		}

		for (int x=0; x<80; ++x) {
			for (int y=0; y<50; ++y) {
				float xO = (float)x/40;
				float yO = (float)y/30;
				int pB = 1+abs(sin(a+xO*sin(b)) * cos(b+yO) * sin(-c+xO*2))*8;
				int pC = abs(sin(b+xO) * cos(-c+yO) * sin(a+yO*2))*8;
				if (pB==8) pB = 7;
				int i = x+y*80;
				if (compareCharInfo(chars[i],getPalette(10))) chars[i] = palette[pC][pB];
			}
		}
		
		
		copyBufferToScreen();

		pause(12);
		float newFrame = (float)(GetTickCount()-lastFrame)/(float)3000;
		
		if (timeUntilNextFade) {
			timeUntilNextFade--;
		} else {
			fadeInText++;
			if (fadeInText==0) {
				timeUntilNextFade=300;
			} else if (fadeInText==80) {
				fadeInText=-80;
				curMsg++;
				if (curMsg==7) curMsg = 0;
			}
		}

		a+=newFrame;
		b+=newFrame*2;
		c+=newFrame*3;

		getEvents();
		lastFrame = GetTickCount();
		if (allKeys[VK_ESCAPE]) break;
	}

}




void waterEffect() {

	long lastFrame = GetTickCount();

	float rippleOffset = 0;
	float textXOffset = 80;
	
	while (1) {
		
		for (int i=0; i<80*25; ++i) {
			chars[i] = getPalette(bmpOpera[i]);
		}

		
		if (!allKeys[VK_SPACE]) vPutS(textXOffset, (int)9*sin(rippleOffset/2)+10, "          The Sydney Opera House in Sydney, New South Wales, Australia, is one of the most distinctive and famous 20th-century buildings, and one of the most famous performing arts venues in the world. Situated on Bennelong Point in Sydney Harbour, with parkland to its south and close to the enormous Sydney Harbour Bridge, the building and its surroundings form an iconic Australian image. To some the spherical-sectioned shells remind them of the flotilla of sailboats commonly cruising there. Tourists, most with no interest in opera, throng to the building in their thousands purely to see it. As well as many touring theatre, ballet, and musical productions the Opera House is the home of Opera Australia, the Sydney Theatre Company and the Sydney Symphony Orchestra.          ");

		// Copy to bottom
		int i = 24*80;
		for (int y=0; y<25; ++y) {
			for (int x=0; x<80; ++x) {
				chars[x+(y+25)*80] = chars[i++];
			}
			i-=160;
		}

		// Now the fun part: SHIFT!

		for (int y=0; y<25; ++y) {
			int offset = (int)((float)y*(float)sin((float)y/3+rippleOffset));
			shiftRow(y+25,offset,bmpOpera[0]);
		}
		
		// Change colours:

		
		int pxInfo[2] = {0,};
		for (int y=0; y<25; ++y) for (int x=0; x<80; ++x) {
		
			int i = (y+25)*80+x;
			getPixelInfo(chars[i], pxInfo);
			int c = pxInfo[0];
			int b = pxInfo[1];

			b-=(int)(2+sin((float)y/2-rippleOffset*2)+cos((float)x/50+rippleOffset));

			if (b<0) b=0;
			if (b>7) b=7;

			chars[i] = palette[c][b];
		}
		
		

		copyBufferToScreen();

		pause(12);

		float newFrame = (float)(GetTickCount()-lastFrame)/(float)400;
		rippleOffset+=newFrame;
		textXOffset-=newFrame*24;
		if (textXOffset<(-784*8)) textXOffset = 0;
		getEvents();
		lastFrame = GetTickCount();
		if (allKeys[VK_ESCAPE]) break;
	}

}

void introEffect() {
	long lastFrame = GetTickCount();
	float spinOffset = 0;

	float flameHeightRotate = 0;
	float lastColourChange = 0;

	int flame[80][50] = {0,};
	int flameColour = 1;

	int framesPassed = 0;

	char msg[] = "ASCII Madness 2005! ";
	int lenMsg = 20;
	while (1) {
		
		if (framesPassed & 2) {
			for (int x=0; x<80; x++) {
				for (int y=48; y<50; y++) {
				flame[x][y] = rand() % 256;
				}
			}


			for (int y=0; y<=48; y++) {
				for (int x=2; x<=78; x++) {
					flame[x][y] = ((flame[x-1][y+1]+flame[x][y+1]+flame[x+1][y+1]+flame[x][y+2])/4)-1;
					if (flame[x][y]<0) flame[x][y]=0;
				}
			}
			framesPassed = 0;
		}

		for (int y=0; y<50; ++y) {
			for (int x=0; x<80; ++x) {
				int b = (float)(flame[x][y])*abs(sin(flameHeightRotate))/32;

				if (b>7) b = 7;
				if (b<0) b = 0;
				chars[x+y*80] = palette[flameColour][b];
			}
		}

		if (!allKeys[VK_SPACE]) {

			for (int i=lenMsg-1; i>=0; --i) {
				float a = -(spinOffset + (float)i/lenMsg * 2*PI);
				float o = 21+8*sin(spinOffset*3);
				vPutC(o*sin(a)+36,o*0.8*cos(a)+21,msg[i]);
			}

		}
		

		copyBufferToScreen();

		pause(12);
		framesPassed++;
		float newFrame = (float)(GetTickCount()-lastFrame)/(float)1000;
		spinOffset+=newFrame;

		flameHeightRotate+=newFrame/4;
		if (flameHeightRotate>lastColourChange+PI) {
			lastColourChange = flameHeightRotate;
			flameColour++;
			flameColour&=7;
			if (flameColour==0) flameColour=1;
		}


		getEvents();
		lastFrame = GetTickCount();
		if (allKeys[VK_ESCAPE]) break;
	}
}

void flagEffect() {

	

	char msg[] = "      To Order By Phone - we feel that your eyesight is important and should be cherished - replica sunglasses with fast shipping and big selection - sunglasses manufacturer offering polarized sunglasses - Designer style sunglasses at a fraction of the cost - you'll need glasses after staring at this effect for too long!      #";
	int msgOffset = 0;
	int msgX = 0;
	
	long lastFrame = GetTickCount();

	float rippleOffset = 0;
	float ampOffset = 0;
	
	while (1) {
		
		for (int i=0; i<80*50; ++i) {
			chars[i] = getPalette(bmpGlasses[i]);
		}

		if (!allKeys[VK_SPACE]) {
			for (int x=0; x<5 && msg[msgOffset+x]; ++x)	vPutCScale(x*30-msgX,10,msg[msgOffset+x],4);
		}

		float amp = (5+cos(ampOffset)*2);
		for (int y=0; y<80; ++y) shiftCol(y,amp*(float)sin(rippleOffset+(float)y/10),0);
		for (int x=0; x<50; ++x) shiftRow(x,amp*(float)sin(rippleOffset+(float)x/10),0);

		copyBufferToScreen();

		pause(12);

		msgX++;
		if (msgX==31) {
			msgX = 0;
			msgOffset++;
			if (msg[msgOffset+4]=='#') msgOffset = 0;
		}

		float newFrame = (float)(GetTickCount()-lastFrame)/(float)100;
		rippleOffset+=newFrame;
		ampOffset+=newFrame/5;
		getEvents();
		lastFrame = GetTickCount();
		if (allKeys[VK_ESCAPE]) break;
	}

}

float toRadians(int angle) {
	return ((float)angle/256)*2*PI;
}

int getRotatedX(int rx, int ry, float s) {
	return 40 + 25 * sin(toRadians(rx)) * cos(toRadians(ry)) * s;
}
int getRotatedY(int rx, int ry, float s) {
	return 25 + 22 * sin(toRadians(ry)) * s;
}

int fixByteSign(byte a) {
	if (a & 128) {
		return -(256-(int)a);
	} else {
		return (int)a;
	}
}

void globeEffect() {
	
	char msg[7][64];
	strcpy(msg[0]," No demo\nwith  any\n  self-\nrespect's\ncomplete\nwithout a");
	strcpy(msg[1],"\n+-------+\n|Plasma!|\n+-------+");
	strcpy(msg[2],"\nIt's  the\n fourth\nstate  of\n matter.");
	strcpy(msg[3],"\n 99%  of\nthe known\nuniverse\nis plasma");
	strcpy(msg[4],"Lightning\n Aurora\nborealis,\nthe solar\nwind, and\n nebulae.");
	strcpy(msg[5]," The Sun\n  is an \n example\nof a  hot\n plasma!");
	strcpy(msg[6],"A  plasma\nis a good\nelectric\npotential\nconductor");

	int curMsg = 0;


	long lastFrame = GetTickCount();

	int globRot = 0;
	int globeColour = 1;

	clearBuffer(0);
	int out[2];

	while (1) {
	
		for (int i=0; i<50*80; ++i) {
			getPixelInfo(chars[i],out);
			if (out[1]==7) out[1]=6;
			if (out[1]>0) {
				chars[i] = palette[out[0]][out[1]-1];
			}
		}

		float s = 1+sin((float)toRadians(globRot));

		for (int pass=0; pass<2; ++pass) {
			int sX = mdlGlobe[0];
			int sY = mdlGlobe[1];
			int eX;
			int eY;
			for (int p=0; fixByteSign(mdlGlobe[p])!=-1;) {
				int x = fixByteSign(mdlGlobe[p++]);
				if (x==-2) {
					sX = fixByteSign(mdlGlobe[p++]);
					sY = fixByteSign(mdlGlobe[p++]);
					eX = fixByteSign(mdlGlobe[p++]);
					eY = fixByteSign(mdlGlobe[p++]);
				} else {
					eX = sX;
					eY = sY;
					sX = x;
					sY = mdlGlobe[p++];
				}

				int rSX = clipVal(sX+globRot/2,256);
				int rSY = clipVal(sY,256);
				int rEX = clipVal(eX+globRot/2,256);
				int rEY = clipVal(eY,256);

				int x1 = getRotatedX(rSX,rSY,s);
				int y1 = getRotatedY(rSX,rSY,s);
				int x2 = getRotatedX(rEX,rEY,s);
				int y2 = getRotatedY(rEX,rEY,s);
			
				if (rSX>64&&rSX<192) {
					if (pass==0) drawLine(x1,y1,x2,y2,palette[globeColour][3]);
				} else {
					if (pass==1) drawLine(x1,y1,x2,y2,palette[globeColour][7]);
				}			
			}
		}


		copyBufferToScreen();

		pause(12);

		globRot++;

		if ((globRot-192)%256==0) {
			globeColour++;
			if (globeColour==8) globeColour=1;
		}
		

		float newFrame = (float)(GetTickCount()-lastFrame)/(float)100;
		getEvents();
		lastFrame = GetTickCount();
		if (allKeys[VK_ESCAPE]) break;
	}

}

float getHeight(float flrX, float flrY) {
	int pX = clipVal((int)flrX,256);
	int pY = clipVal((int)flrY,256);

	float dPX = abs(flrX) - abs((int)flrX);
	float dPY = abs(flrY) - abs((int)flrY);

	float h1 = heightMap[pX][pY];
	float h2 = heightMap[pX+1%256][pY];
	float h12 = h1 + ((h2 - h1) * dPX);

	float h3 = heightMap[pX][pY+1%256];
	float h4 = heightMap[pX+1%256][pY+1%256];
	float h34 = h3 + ((h4 - h3) * dPX);
	return h12+dPY*(h34-h12);
}

void voxelEffect() {

	long lastFrame = GetTickCount();

	CHAR_INFO colourMap[256][256];

	int timeUntilExplode = -50;

	char msg[8][54];
	strcpy(msg[0],"This demoshows offa  simple  voxel  Landscape  flyby.");
	strcpy(msg[1],"   The\nheightmap here is generatedrandomly.");
	strcpy(msg[2],"There aretwo main  problemswith the   text\noverlays:");
	strcpy(msg[3],"1) I find it hard to reallythink  ofsomething to say.");
	strcpy(msg[4]," 2) They block outthe  demo that is currently running.");
	strcpy(msg[5],"And so at   this\n point I will shut up  and leave you");
	strcpy(msg[6],"\0");
	strcpy(msg[7]," Oh, you can  alsopress theSpace bar to hide messages!");

	
	
	int msgP = 0;

	for (int x=0; x<256; x+=8) for (int y=0; y<256; y+=8) {
        float c = (float)((rand() % 1024))/1024;
        for (int a=x; a<x+8; a++) for (int b=y; b<y+8; b++) {
            heightMap[a][b] = c-(1+cos((float)(x-128)/50)*cos((float)(y-128)/50))+(rand()%3)/2;
		}
	}
    
	int tempColourMap[256][256];
    for (int x=0; x<256; x++) for (int y=0; y<256; y++) {
		tempColourMap[x][y] = (rand()%20)-4;
	}
   
    for (int i=0; i<5; ++i) for (int x=0; x<256; x++) for (int y=0; y<256; y++) {
        heightMap[x][y] = 
			(heightMap[x][y]+heightMap[x+1%256][y]+heightMap[x][y+1%256]+heightMap[x+1%256][y+1%256])/4;
        tempColourMap[x][y] = 
			(tempColourMap[x][y]+tempColourMap[x+1%256][y]+tempColourMap[x][y+1%256]+tempColourMap[x+1%256][y+1%256])/4;
	}


	for (int x=0; x<256; x++) for (int y=0; y<256; y++) {
		if (heightMap[x][y]>0.9) {
			heightMap[x][y]=0.9;
			colourMap[x][y]=palette[3][7];
		} else {
			int b=(int)(16-(16*heightMap[x][y]-heightMap[(x+1)%256][y]+1));
			b = tempColourMap[x][y];
			if (b<0) b=0;
			if (b>7) b=7;
			int c = 0;
			if (heightMap[x][y]<0.2) c=7;
			else if (heightMap[x][y]<0.8) c=2;
			else c=6;
			colourMap[x][y]=palette[c][b];
		}
	}

	const float trigScale = 80;

	float pixelDistTable[250*80];
	for (int a=0; a<80; ++a) {
		for (int d=0; d<25; ++d) {
			pixelDistTable[a+d*80]=((float)(25)/(float)(25-(float)d))*(1/cos((float)(40-a)/trigScale));
		}
	}

	float rotAngle = 0;
	float xOffset = 128;
	float yOffset = 128;
	float zOffset = 50;
	float flyHeight = 0;

	while (1) {
		
		clearBuffer(59);

		for (int y=0; y<25; ++y) {
			int dY = y+(zOffset-50);
			if (dY<50 && dY>=0) {
				for (int x=0; x<80; ++x) {
					int dX = clipVal(x - (int)(rotAngle),80);
					if (dX<80 && x>=0) {
						chars[dX+dY*80] = getPalette(bmpHills[x+y*80]);
					}
				}
			}
		}
		
		int lastH[80] = {0,};		
		float lastX[80] = {0,};
		float lastY[80] = {0,};
	
		float t = 0;
		
		float flyHeight = 0.7;

		bool doneBefore = false;

		float dY = 0.01;
		for (float y=30; y>0; y-=dY) {
		
			dY = 3/(y+1);
			for (int x=0; x<80; ++x) {	
				float rayAngle = (x+rotAngle-40)/trigScale;
				float pixlDist = ((float)(25)/(float)(30-(float)y))*(1/cos((float)(40-x)/trigScale)); //pixelDistTable[(int)(x+y*80)];
				float flrX = xOffset+pixlDist*sin(rayAngle);
				float flrY = yOffset+pixlDist*cos(rayAngle);

				float h = (getHeight(flrX,flrY)+flyHeight)/pixlDist*300;

				

				if (doneBefore) {
					int rYa=lastH[x]-y+zOffset-1;
					int rYb=h-y+zOffset;
					for (int drwY=rYa; drwY<=rYb && drwY<50 && drwY>=0; drwY++) {
						float progress = ((float)drwY-(float)rYa)/((float)rYb-(float)rYa);
						float rFlrX = lastX[x]+(flrX-lastX[x])*progress;
						float rFlrY = lastY[x]+(flrY-lastY[x])*progress;

						int rPX = clipVal((int)rFlrX,256);
						int rPY = clipVal((int)rFlrY,256);

						int out[2];
						getPixelInfo(colourMap[rPX][rPY], out);
						out[1]-=((int)(pixlDist/50)*2);
						if (out[1]<0) out[1]=0;
						chars[x+drwY*80]=palette[out[0]][out[1]];
					}
				}

				lastH[x]=h;
				lastX[x]=flrX;
				lastY[x]=flrY;
			}
			doneBefore=true;
		}


		if (!allKeys[VK_SPACE]) {
			int p=0;
			for (int y=0; y<6&&msg[msgP][p]; ++y) for (int x=0; x<9&&msg[msgP][p]; ++x) {
				char c=msg[msgP][p++];	
				if (c=='\n') {
					x=9;
				} else {
					int pX = x*8+4;
					int pY = y*8+1;
					if (timeUntilExplode<-50) {
						pY+=abs(timeUntilExplode)-100;
					} else if (timeUntilExplode<0) {
						pX+=(int)((float)abs(timeUntilExplode)*((float)x-3.5)*2);
						pY+=(int)((float)(abs(timeUntilExplode)*(y-3.5))/1.6*2);
					}
					vPutC(pX,pY,c);
				}
			}
		}

		copyBufferToScreen();

		pause(12);

		timeUntilExplode--;
		if (timeUntilExplode==-100) {
			timeUntilExplode = 150;
		}
		if (timeUntilExplode==-50) {
			msgP++;
			if (msgP==8) msgP=0;
		}
		float newFrame = (float)(GetTickCount()-lastFrame)/(float)30;
		
		rotAngle+=newFrame;
		xOffset=128-5*sin(rotAngle/trigScale-PI/trigScale)+100*sin(rotAngle/trigScale/10);
		yOffset=128-5*cos(rotAngle/trigScale-PI/trigScale)+100*cos(rotAngle/trigScale/10);
		zOffset=40+10*sin(rotAngle/trigScale/3);

		getEvents();
		lastFrame = GetTickCount();
		if (allKeys[VK_ESCAPE]) break;
	}

}

void startEffect() {
	long lastFrame = GetTickCount();

	char asc[] = "ASCII";
	char mad[] = "madness";
	char instr[] = "Hit Alt-Enter to jump into flicker-free\nand speedier fullscreen.\nTo progress through the effects, hit the\nescape key.\nPressing and holding the space bar will\nhide the text overlays.\nKeep out of reach of children.\n\nHand crafted lovingly by Ben Ryves 2005.\nEffect ideas ripped from TI-83 Plus demo\n'Pixel Madness' - I wrote that one too!\n\nSome of the text shamelessly nicked from\nthe Wikipedia.\n\nHuge thanks to Tim Park for his code for\nFisharium. Console abuse was made much\neasier by looking at his code, rather\nthan having to hunt through the MSDN site.\n\nVisit me at http://www.benryves.com.";

	char msg[] = "ASCII (American Standard Code for Information Interchange), generally pronounced ass-key, is a character set and a character encoding based on the Roman alphabet as used in modern English and other Western European languages. It is most commonly used by computers and other communication equipment to represent text and by control devices that work with text. Like other character representation computer codes, ASCII specifies a correspondence between digital bit patterns and the symbols/glyphs of a written language, thus allowing digital devices to communicate with each other and to process, store, and communicate character-oriented information. The ASCII character encoding, or a compatible extension (see below), is used on nearly all common computers, especially personal computers and workstations. The preferred MIME name for this encoding is \"US-ASCII\". ASCII is, strictly, a seven-bit code, meaning that it uses the bit patterns representable with seven binary digits (a range of 0 to 127 decimal) to represent character information. At the time ASCII was introduced, many computers dealt with eight-bit groups (bytes or, more specifically, octets) as the smallest unit of information; the eighth bit was commonly used as a parity bit for error checking on communication lines or other device-specific functions. Machines which did not use parity typically set the eighth bit to zero, though some systems such as PRIME machines running PRIMOS set the eighth bit of ASCII characters to one. ASCII does not specify any way to include information about the conceptual structure or appearance of a piece of text. That requires other standards, such as those specifying markup languages. ";
	int msgOff = 0;
	int ticksBeforeAdvance = 0;

	float rippleOffset = 0;

	while (1) {
		
		clearBuffer(0);

		for (int i=0; asc[i]; i++) vPutCScaleCentred(16*i+8, 8, asc[i], 2+sin((float)i+rippleOffset));
		for (int i=0; mad[i]; i++) vPutCScaleCentred(12*i+4, 20, mad[i], 1+(cos((float)i+rippleOffset)/10)/2);

		int p = msgOff;
		for (int i=0; i<50*80; i++) {
			int c = 7;
			chars[i].Char.AsciiChar = msg[p++];
			if (!msg[p]) p=0;

			if (chars[i].Attributes&15==15) {
				if (i<16*80) {
					c|=BACKGROUND_BLUE|FOREGROUND_INTENSITY;
					c-=(FOREGROUND_GREEN|FOREGROUND_RED);
				} else {
					c|=BACKGROUND_RED|FOREGROUND_INTENSITY;
					c-=(FOREGROUND_GREEN|FOREGROUND_BLUE);
				}
				
			}
			chars[i].Attributes = c;
		}


		for (int x=2; x<46; ++x) for (int y=25; y<48; ++y) {
			chars[x+y*80].Char.AsciiChar = ' ';
			chars[x+y*80].Attributes = BACKGROUND_GREEN|FOREGROUND_GREEN|FOREGROUND_INTENSITY;
		}

		int x = 3;
		int y = 26;
		for (int p=0; instr[p]; p++) {
			char c = instr[p];
			if (c=='\n') {
				y++;
				x=3;
			} else {
				chars[x+y*80].Char.AsciiChar = c; 
				x++;
			}
		}

		for (int x=0; x<30; x++) for (int y=0; y<23; y++) {
			chars[x+48+(y+25)*80] = getPalette(bmpSmallIcon[x+y*30]);
		}

		copyBufferToScreen();

		pause(12);


		if ((++ticksBeforeAdvance)%3 == 0) {
			if (!msg[msgOff++]) msgOff=0;
		}

		float newFrame = (float)(GetTickCount()-lastFrame)/(float)100;
		rippleOffset+=newFrame;
		getEvents();
		lastFrame = GetTickCount();
		if (allKeys[VK_ESCAPE]) break;
	}
}


int main(int argc, char* argv[]) {

	// Get handle
	wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	rHnd = GetStdHandle(STD_INPUT_HANDLE);

	// Set up window:
	

	SMALL_RECT rect = {0, 0, 79, 49};

	SetConsoleWindowInfo(wHnd, TRUE, &rect);
	SetConsoleScreenBufferSize(wHnd, coord);
	LPCTSTR windowTitle = "ASCII Madness - Ben Ryves 2005";
	SetConsoleTitle(windowTitle);

	decompressData(compOpera, bmpOpera, 80*25);
	decompressData(compFont, smallFont, 252*21);
	decompressData(compGlasses, bmpGlasses, 80*50);
	decompressData(compHills, bmpHills, 80*25);
	decompressData(compSmallIcon, bmpSmallIcon, 30*23);

	// Create palette

	for (int c=0; c<8; ++c) {
		for (int b=0; b<8; ++b) {
			char dithers[4] = {176,177,178,219};
			int colour = c;		
			if (b>3) colour|=FOREGROUND_INTENSITY;
			if (b==5 || b==3) colour|=((colour&7)<<4);
			if (b==0) colour = 0;
			palette[c][b].Attributes = colour;
			palette[c][b].Char.AsciiChar = dithers[b>>1];
		}
	}

	startEffect(); while (allKeys[VK_ESCAPE]) getEvents();
	introEffect(); while (allKeys[VK_ESCAPE]) getEvents();
	plasmaEffect(); while (allKeys[VK_ESCAPE]) getEvents();
	voxelEffect(); while (allKeys[VK_ESCAPE]) getEvents();
	tunnelEffect(); while (allKeys[VK_ESCAPE]) getEvents();
	globeEffect(); while (allKeys[VK_ESCAPE]) getEvents();
	waterEffect(); while (allKeys[VK_ESCAPE]) getEvents();
	flagEffect(); while (allKeys[VK_ESCAPE]) getEvents();	
	return 0;
}

